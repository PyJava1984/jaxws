<?xml version="1.0"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!-- ************ JAXWS build file ************************************** -->



<project name="JAXWS-RI" default="main" basedir=".">
  <import file="etc/build-bundle.xml"/>
  <import file="build-taskdefs.xml" />  

  <target name="runtime-compile-mustang" depends="prepare">
    <ant dir="${basedir}/rt"
        target="compile-mustang"
        inheritrefs="true"/>
    <ant dir="${basedir}/rt-fi"
        target="compile-mustang"
        inheritrefs="true"/>
  </target>


  <target name="javadocs-spi" depends="image">
    <javadoc packagenames="com.sun.xml.ws.spi.runtime.*, com.sun.tools.ws.spi.*"
         sourcepathref="all-source-path"
         destdir="${build.home}/javadocs/spi"
         author="false"
         version="false"
         windowtitle="${Name} Generated Documentation"
         doctitle="${Name}"
         bottom="Copyright &#169; 2005 Sun Microsystems, Inc. All Rights Reserved.">
        <classpath refid="tools.compile.classpath"/>
    </javadoc>
  </target>


    <target name="architecture-document" depends="prepare"
            description="generate architecture documents (which is just a glorified javadoc)">
      <mkdir dir="${build.home}/javadoc" />
      <taskdef name="sequence-diagram" classname="com.sun.xml.bind.taglets.SequenceDiagramTask">
        <classpath>
          <pathelement path="${basedir}/tools/lib/taglets.jar" />
        </classpath>
      </taskdef>
      <sequence-diagram
        src="${basedir}/javadoc"
        dest="${build.home}/javadoc"
        includes="**/*.seq" />

      <javadoc
            destdir="${build.home}/javadoc"
            use="true"
            author="false"
            version="false"
            windowtitle="JAX-WS RI"
            doctitle="JAX-WS RI"
            access="package">

      <doclet name="com.sun.xml.bind.taglets.CustomHtmlDoclet"
        path="${basedir}/tools/lib/taglets.jar">
      </doclet>

    <!--doclet name="wrappertaglet.WrapperTaglet" path="${basedir}/tools/lib/wrappertaglet.jar:${build.home}/lib/UmlGraph-4.4.jar:${basedir}/tools/lib/taglets.jar">
		<param name="-inferrel"/>
		<param name="-inferdep"/>
		<param name="-hide" value="java.*"/>
		<param name="-collpackages" value="java.util.*"/>
		<param name="-qualify"/>
		<param name="-postfixpackage"/>
		<param name="-nodefontsize" value="9"/>
		<param name="-nodefontpackagesize" value="7"/>
	</doclet-->
      <packageset dir="${basedir}/javadoc"/>
      <group title="Root Architecture Document" packages="jaxws" />

      <packageset dir="${basedir}/rt/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.*,com.sun.pept.*" />

      <packageset dir="${basedir}/servlet/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.*" />

      <packageset dir="${basedir}/transports/local/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.transport.local.*" />

      <packageset dir="${basedir}/tools/wscompile/src"/>
      <group title="Tools" packages="com.sun.tools.ws.*,com.sun.istack.*" />

      <link href="https://jaxb.dev.java.net/nonav/jaxb20-pr/api/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/jaxb-api"   />
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/j2se5.0"  />
      <link href="https://jaxb-architecture-document.dev.java.net/nonav/doc/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/jaxb-ri"  />

      <classpath refid="tools.compile.classpath"/>
    </javadoc>
    </target>

  <target name="generate-code" description="Just run the code generators. Designed to be invoked from IDE while developing the RI">
    <ant dir="${basedir}/rt"              target="generate-code" inheritrefs="true"/>
    <ant dir="${basedir}/tools/wscompile" target="generate-code" inheritrefs="true"/>
  </target>



  <target name="runtime-build-mustang" depends="runtime-compile-mustang">
    <!-- Copy resource files etc -->
    <copy todir="${basedir}/rt/build/classes">
      <fileset dir="${basedir}/rt/src">
        <include name="**/*.properties" />
      </fileset>
    </copy>

    <versionProp file="${basedir}/rt/build/classes/com/sun/xml/ws/version.properties" />

    <!-- Copying the manifest -->
    <copy file="${basedir}/rt/etc/manifest" todir="${basedir}/rt/build"/>
    <updateManifestWithVersion file="${basedir}/rt/build/manifest" />

    <jar jarfile="${build.home}/lib/jaxws-rt.jar"
        manifest="${basedir}/rt/build/manifest">
      <fileset dir="${basedir}/rt/build/classes"/>
      <fileset dir="${basedir}/rt-fi/build/classes"/>
    </jar>
  </target>

  <target name="docs" depends="prepare">
      <copy todir="${build.home}/docs">
          <fileset dir="." includes="ThirdPartyLicense.txt, CDDL-1.0-license.txt, distributionREADME_WMforJava2.0.txt" />
          <fileset dir="docs" includes="sun-jaxws.xsd" />
          <filterset begintoken="@@" endtoken="@@">
            <filter token="SPEC_VERSION"
                    value="${release.spec.version}" />
            <filter token="IMPL_VERSION"
                    value="${release.impl.version}"/>
            <filter token="IMPL_VERSION_SUFFIX"
                    value="${release.impl.version.suffix}"/>
          </filterset>
      </copy>
      <copy todir="${build.home}/docs">
          <fileset dir="${docs.home}" includes="style/*, Copyright.txt" />
      </copy>

      <taskdef name="htmlmacro" classname="com.sun.wts.tools.htmlmacro.HtmlMacroTask">
          <classpath>
            <fileset dir="${lib.home}" />
          </classpath>
      </taskdef>
      <htmlmacro  destdir="${build.home}/docs">
      <documents dir="${docs.home}" includes="*.html *.xsd" excludes="sun-jaxws.xsd"/>
      <tags dir="${docs.home}/tags" includes="**/*.tag" />
      <property key="SPEC_VERSION" value="${release.spec.version}"/>
      <property key="IMPL_VERSION" value="${release.impl.version}"/>
      <property key="IMPL_VERSION_SUFFIX" value="${release.impl.version.suffix}"/>
      </htmlmacro>
    </target>

    <target name="clean" depends="jax-ws.clean">
        <ant dir="${basedir}/transports/local" target="clean"/>
    </target>
<!-- for now, this gets everything built -->
    <target name="image" depends="tools-build">
        <ant dir="transports/local" target="dist" inheritrefs="true"/>
        <!-- should I copy local transport jar to the build.home?  -->

        <copy todir="${build.home}">
            <fileset dir="."
                     includes="ThirdPartyLicense.txt, CDDL-1.0-license.txt, distributionREADME_WMforJava2.0.txt"/>
        </copy>
    </target>

  <target name="dist" depends="image, docs">
    <mkdir dir="${dist.home}"/>
    <mkdir dir="${dist20.home}"/>
    <mkdir dir="${dist20.home}/bin"/>
    <mkdir dir="${dist20.home}/lib"/>
    <mkdir dir="${dist20.home}/docs"/>
    <mkdir dir="${dist20.home}/samples"/>

    <copy tofile="${dist20.home}/build.xml" file="${build.home}/../etc/istackonsjsas.xml">
        <filterset begintoken="@@" endtoken="@@">
          <filter token="SPEC_VERSION"
                  value="${release.spec.version}" />
          <filter token="IMPL_VERSION"
                  value="${release.impl.version}"/>
          <filter token="IMPL_VERSION_SUFFIX"
                  value="${release.impl.version.suffix}"/>
        </filterset>
    </copy>
    <copy    todir="${dist20.home}/bin">
      <fileset dir="${build.home}/bin"
          includes="wsimport.*, wsgen.*"/>
    </copy>

    <chmod perm="+x" file="${dist20.home}/bin/wsimport.sh"/>
    <chmod perm="+x" file="${dist20.home}/bin/wsgen.sh"/>

    <copy    todir="${dist20.home}/lib">
      <fileset dir="${build.home}/lib" includes="*.jar"/>
    </copy>
    	
    <copy    todir="${dist20.home}/docs">
      <fileset dir="${build.home}/docs"/>
    </copy>

    <copy    todir="${dist20.home}/samples">
      <fileset dir="samples" includes="**/common_resources/**"/>
    </copy>
  	<copy todir="${dist20.home}/samples">
        <fileset dir="samples" includes="**" excludes="**/common_resources/**,**/CVS/**" />
        <filterset begintoken="@@" endtoken="@@">
          <filter token="SPEC_VERSION" 
                  value="${release.spec.version}" />
          <filter token="IMPL_VERSION"
                  value="${release.impl.version}"/>
          <filter token="IMPL_VERSION_SUFFIX"
                  value="${release.impl.version.suffix}"/>
        </filterset>
	</copy>

    <copy todir="${dist20.home}/samples/restful/etc">
        <fileset dir="lib" includes="servlet.jar"/>
    </copy>

     <copy todir="${dist20.home}">
  	<fileset dir="${build.home}" includes="*.txt"/>
    </copy>

    <!-- add a copy of the license and README files to the top level -->
    <copy todir="${dist20.home}">
        <fileset dir="." includes="ThirdPartyLicense.txt, CDDL-1.0-license.txt, distributionREADME_WMforJava2.0.txt" />
    </copy>

    <copy todir="${dist20.home}"
          file="README" />
  </target>
  
  <target name="dist.zip" description="create a stand-alone distribution image of the JAX-WS RI"
          depends="dist">
    <zip file="${build.home}/jaxws-ri.zip">
      <fileset dir="${dist.home}" />
    </zip>
  </target>

  <target name="dist-zip-with-src" depends="src.zip, dist.zip"/>

  <target name="src.zip" description="create source zip bundles of the JAX-WS RI" depends="dist">
    <zip file="${dist20.home}/lib/jaxws-rt.src.zip">
      <fileset dir="${basedir}/rt/src" />
      <fileset dir="${basedir}/rt-fi/src" />
      <fileset dir="${basedir}/servlet/src"/>
      <fileset dir="${basedir}/transports/local/src"/>
      <fileset dir="${basedir}/rt/build/gen-src/"/>
    </zip>
    <zip file="${dist20.home}/lib/jaxws-tools.src.zip">
      <fileset dir="${basedir}/tools/wscompile/src" />
      <fileset dir="${basedir}/tools/wscompile/build/gen-src/"/>
    </zip>
    <zip file="${dist20.home}/lib/jaxws-libs.src.zip">
      <fileset dir="${basedir}/lib" includes="*src.zip" />
    </zip>
  </target>

    <target name="libs.src.zip">
        <zip file="${build.home}/jaxws-libs.src.zip">
            <fileset dir="${basedir}/lib" includes="*.zip"/>
        </zip>
    </target>

    <target name="hudson" depends="clean, dist.zip, src.zip, libs.src.zip, javadocs" />

    <target name="push-to-maven-prepare"
    description="prepare a repository image for the push-to-maven target">
    <taskdef resource="maven-repository-importer.properties">
      <classpath>
        <pathelement path="tools/lib/maven-repository-importer.jar" />
      </classpath>
    </taskdef>
    <delete dir="build/maven-repo" /><!-- clean it -->
    <!-- ${suffix} can be overridden to "" for posting releases -->
    <!-- ${suffix} can be overridden to "" for posting releases -->
      <!--
        when building jars for Maven, we want to put suffix
        (sometimes with version like '-2.0.beta1', with date '-20051208', or with '-SNAPSHOT')
        this property lets you do that.
      -->
    <fail unless="jar.suffix">jar.suffix property needs to be defined</fail>
    <maven-repository-importer
        destdir="build/maven-repo" version="${jar.suffix}">
      <artifact
        jar="${dist20.home}/lib/jaxws-api.jar"
        pom="etc/poms/jaxws-api.pom"
        srczip="lib/jaxws-api-src.zip" />
      <artifact
        jar="${dist20.home}/lib/jaxws-rt.jar"
        pom="etc/poms/jaxws-rt.pom"
        srczip="${dist20.home}/lib/jaxws-rt.src.zip" />
      <artifact
        jar="${dist20.home}/lib/jaxws-tools.jar"
        pom="etc/poms/jaxws-tools.pom"
        srczip="${dist20.home}/lib/jaxws-tools.src.zip" />
      <artifact
        jar="lib/jsr181-api.jar"
        pom="etc/poms/jsr181.pom"
        srczip="lib/jsr181-api.src.zip" />
      <filterset>
        <filter token="API_VERSION" value="${release.spec.version}"/>
        <filter token="JAXB_VERSION" value="${jaxb.impl.version}"/>
      </filterset>
    </maven-repository-importer>
  </target>

  <target name="push-to-maven" depends="push-to-maven-prepare"
    description="publish artifacts into the maven repository">
    <echo>importing to CVS...</echo>
    <cvs-import src="build/maven-repo" dest="jax-ws-sources/repo" cvsroot=":pserver:${user.name}@java-net-cvs:/cvs" />
  </target>

  <target name="push-snapshot-to-maven" depends="dist"
      description="publish snapshot jars into the maven repository">
      <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT" />
      <antcall target="push-to-maven" />
  </target>


  
    <target name="integrate-jaxb-hudson" depends="prepare"
            description="integrate the last successful JAXB Hudson build">
      <get src="http://kohsuke.sfbay.sun.com/hudson/job/jaxb-ri-2.1/lastSuccessfulBuild/artifact/jaxb2-sources/jaxb-ri/jaxb-ri.zip"
           dest="${build.home}/jaxb-ri.zip" />
      <mkdir dir="${build.home}/jaxb" />
      <unzip src="${build.home}/jaxb-ri.zip" dest="${build.home}/jaxb"/>
      <copy todir="lib" overwrite="true">
        <fileset dir="${build.home}/jaxb/jaxb-ri/lib" includes="*.zip,*.jar"
                 excludes="activation.jar, jsr173_1.0_api.jar, jaxb1-impl.jar" />
      </copy>
  <!--<delete dir="${build.home}/jaxb" /> -->
    </target>

  <target name="integrate-maven-repository-importer">
    <get src="http://kohsuke.sfbay/hudson/job/maven-repository-importer/lastSuccessfulBuild/artifact/build/maven-repository-importer.jar"
         dest="tools/lib/maven-repository-importer.jar" />
  </target>

  <target name="integrate-saaj-hudson" depends="prepare"
          description="integrate the last successful SAAJ RI Hudson build">
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/saaj-ri/lastSuccessfulBuild/artifact/dist/lib/saaj-impl.jar"
         dest="lib/saaj-impl.jar" />
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/saaj-ri/lastSuccessfulBuild/artifact/zip-dist/saaj1.3.src.zip"
         dest="lib/saaj-impl.src.zip" />
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/saaj-api/lastSuccessfulBuild/artifact/build/lib/saaj-api.jar"
         dest="lib/saaj-api.jar" />
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/saaj-api/lastSuccessfulBuild/artifact/build/saaj-api-src.zip"
         dest="lib/saaj-api-src.zip" />
  </target>

  <target name="integrate-xmlstreambuffer-hudson" depends="prepare"
          description="integrate the last successful XmlStreamBuffer Hudson build">
    <get src="http://kohsuke.sfbay/hudson/job/xmlstreambuffer/lastSuccessfulBuild/artifact/xmlstreambuffer/package/streambuffer.src.zip"
         dest="lib/streambuffer.src.zip" />
    <get src="http://kohsuke.sfbay/hudson/job/xmlstreambuffer/lastSuccessfulBuild/artifact/xmlstreambuffer/streambuffer/dist/streambuffer.jar"
         dest="lib/streambuffer.jar" />
  </target>
  
  <target name="integrate-stax-ex-hudson" depends="prepare"
          description="integrate the last successful stax-ex Hudson build">
    <get src="http://kohsuke.sfbay/hudson/job/stax-ex/lastSuccessfulBuild/artifact/stax-ex/stax-ex/target/stax-ex.jar"
         dest="lib/stax-ex.jar" />
    <get src="http://kohsuke.sfbay/hudson/job/stax-ex/lastSuccessfulBuild/artifact/stax-ex/stax-ex/target/stax-ex-src.zip"
         dest="lib/stax-ex-src.zip" />
  </target>


  <target name="integrate-sjsxp-hudson" depends="prepare"
          description="integrate the last successful sjsxp Hudson build">
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/zephyr/lastSuccessfulBuild/artifact/dist/sjsxp-1_0_1/sjsxp.jar"
         dest="lib/sjsxp.jar" />
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/zephyr/lastSuccessfulBuild/artifact/dist/sjsxp-src-1_0_1.zip"
         dest="lib/sjsxp-src.zip" />
  </target>

  <target name="integrate-jaxws21-api-hudson" depends="prepare"
          description="integrate the last successful jaxws 2.1 API from Hudson build">
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/jsr224-2.1-final/lastSuccessfulBuild/artifact/jsr224/api/build/lib/jaxws-api.jar"
         dest="lib/jaxws-api.jar" />
    <get src="http://kohsuke.sfbay.sun.com/hudson/job/jsr224-2.1-final/lastSuccessfulBuild/artifact/jsr224/api/build/lib/jaxws-api-src.zip"
         dest="lib/jaxws-api-src.zip" />
  </target>

  <target name="integrate-FastInfoset-hudson" depends="prepare"
          description="integrate the last successful FastInfoset 1.2 Hudson build">
    <get src="http://kohsuke.sfbay/hudson/job/fi-1.2/lastSuccessfulBuild/artifact/fi/FastInfoset/dist/FastInfoset.jar"
         dest="lib/FastInfoset.jar" />
    <get src="http://kohsuke.sfbay/hudson/job/fi-1.2/lastSuccessfulBuild/artifact/fi/FastInfoset/dist/FastInfoset.src.zip"
         dest="lib/FastInfoset.src.zip" />
  </target>

    <target name="integrate-htmlmacro-hudson" depends="prepare"
             description="integrate the last successful htmlmacro Hudson build">
       <get src="http://kohsuke.sfbay.sun.com/hudson/job/htmlmacro/lastSuccessfulBuild/artifact/htmlmacro/build/htmlmacro.zip"
            dest="${lib.home}/htmlmacro.zip" />
       <mkdir dir="${lib.home}/htmlmacro" />
       <unzip src="${lib.home}/htmlmacro.zip" dest="${lib.home}/htmlmacro"/>
       <copy todir="lib" overwrite="true">
         <fileset dir="${lib.home}/htmlmacro/" includes="*.zip,*.jar"/>
       </copy>
        <delete dir="${lib.home}/htmlmacro" />
        <delete file="${lib.home}/htmlmacro.zip"/>
     </target>


    <taskdef name="installerBuilder"
        classname="com.sun.tools.xjc.installer.builder.BuilderTask">
      <classpath>
        <fileset dir="${basedir}/tools/lib" includes="installer-builder.jar, sfx4j-1.0.jar"/>
      </classpath>
    </taskdef>

    <target name="re-build"
        description="RE build target">
      <antcall target="generate-binary">
        <param name="compile.debug" value="true"/>
      </antcall>
      <antcall target="generate-weekly-source">
        <param name="compile.debug" value="true"/>
      </antcall>
      <move tofile="${build.home}/jaxws${release.jar.version}.jar"
         file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_${DSTAMP}.jar"/>
      <move tofile="${build.home}/jaxws${release.jar.version}-src.jar"
         file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.jar"/>
    </target>

    <target name="generate-binary"
        description="generate java.net binary distribution">
      <antcall target="dist.zip">
        <param name="compile.debug" value="true"/>
      </antcall>
      <tstamp/>
      <!-- generate the class -->
      <installerBuilder classFile="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_${DSTAMP}.jar"
          licenseFile="${basedir}/CDDL-1.0-license.txt"
          zipFile="${build.home}/jaxws-ri.zip" />
    </target>
    
    <target name="generate-weekly-binary"
        description="generate java.net binary distribution">
      <antcall target="generate-binary">
        <param name="compile.debug" value="true"/>
      </antcall>
      <delete file="${build.home}/jaxws-ri.zip" />
    </target>


    <patternset id="src-includes"
                description="This pattern set defines which files will be in/excluded in the src bundle">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
    </patternset>

    <target name="generate-weekly-source"
        depends="dist"
        description="generate sources for java.net binary distribution">
      <tstamp/>
            
      <!-- create the zip file contents -->
      <property name="source.drop.dir" value="${build.home}/source-bundle"/>
      <property name="source.dist.dir.name" value="jaxws-ri-${DSTAMP}"/>
      <property name="src.installer.tmp" value="${build.home}/src-tmp" />
      <delete dir="${source.drop.dir}"/>
      <mkdir dir="${source.drop.dir}"/>
      <mkdir dir="${source.drop.dir}/jaxws-ri/lib"/>

        <zip destfile="${source.drop.dir}/jaxws-src.zip" duplicate="fail" whenempty="fail">
            <zipfileset dir="rt/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt-fi/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt/build/gen-src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>

            <zipfileset dir="tools/wscompile/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="tools/wscompile/build/gen-src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="servlet/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <!--
            <zipfileset dir="transports/local/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            -->
            <zipfileset dir="${basedir}/etc" includes="src-bundle.xml"
                        fullpath="${source.dist.dir.name}/build.xml"/>

            <!-- additional jar files -->
            <zipfileset dir="${basedir}/build/lib" includes="*.jar" excludes="ant*.* junit.jar" prefix="${source.dist.dir.name}/lib"/>
            <zipfileset dir="servlet/lib" includes="*.jar" prefix="${source.dist.dir.name}/lib"/>

            <!-- license files -->
            <zipfileset dir="." includes="ThirdPartyLicense.txt"
                        prefix="${source.dist.dir.name}"/>

        </zip>

        <!-- test the generated source bundle -->
        <delete dir="${src.installer.tmp}" failonerror="false" />
        <mkdir dir="${src.installer.tmp}" />
        <unzip dest="${src.installer.tmp}" src="${source.drop.dir}/jaxws-src.zip"/>
        <ant dir="${src.installer.tmp}/${source.dist.dir.name}" inheritAll="false" inheritRefs="false"/>

        <!-- delete the srctmp dir -->
        <delete dir="${src.installer.tmp}"/>

      <!-- 1.X version opens to a zip file, so wrap our zip
          in another one to send to installer -->
      <zip destfile="${source.drop.dir}/jaxws-src-installer.zip">
        <zipfileset file="${source.drop.dir}/jaxws-src.zip"/>
      </zip>

      <!-- generate the installer -->
      <installerBuilder classFile="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.jar"
          licenseFile="${basedir}/CDDL-1.0-license.txt"
          zipFile="${source.drop.dir}/jaxws-src-installer.zip"/>
      <delete dir="${source.drop.dir}"/>
    </target>

    <target name="generate-bundle-for-licensee"
            depends="prepare"
            description="generate sources bundle for licensees">
        <tstamp/>

        <!-- create the zip file contents -->
        <property name="source.drop.dir" value="${build.home}/source-bundle"/>
        <property name="source.dist.dir.name" value="jaxws-ri-${DSTAMP}"/>
        <property name="src.installer.tmp" value="${build.home}/src-tmp"/>
        <delete dir="${source.drop.dir}"/>
        <mkdir dir="${source.drop.dir}"/>
        <mkdir dir="${source.drop.dir}/jaxws-ri/lib"/>

        <zip destfile="${build.home}/jaxws-src.zip"  duplicate="fail" whenempty="fail">
            <zipfileset dir="rt" prefix="${source.dist.dir.name}/rt" defaultexcludes="true"/>
            <zipfileset dir="rt-fi" prefix="${source.dist.dir.name}/rt-fi" defaultexcludes="true"/>
            <zipfileset dir="tools" prefix="${source.dist.dir.name}/tools" defaultexcludes="true"
                    excludes="**/*.iml,javadoc-link/**,lib/**,scripts/**,in-cvs.sh"/>
            <zipfileset dir="servlet" prefix="${source.dist.dir.name}/servlet" defaultexcludes="true"/>
            <zipfileset dir="${basedir}/etc" includes="build-bundle.xml"
                        fullpath="${source.dist.dir.name}/build.xml"/>
            <zipfileset dir="${basedir}/etc" includes="src-build-readme.txt"
                        fullpath="${source.dist.dir.name}/README"/>
            <!-- additional jar files -->
            <zipfileset dir="${basedir}/lib" includes="*.jar" excludes="ant*.* junit.jar"
                        prefix="${source.dist.dir.name}/lib"/>
          <!--  <zipfileset dir="servlet/lib" includes="*.jar" prefix="${source.dist.dir.name}/lib"/> -->

            <!-- license files -->
            <zipfileset dir="."
                        includes="ThirdPartyLicense.txt, distributionREADME_WMforJava2.0.txt, build-j2se.xml, project.properties"
                        prefix="${source.dist.dir.name}"/>
        </zip>        
    </target>

  <!-- =====================
       SVR4 DISTRIBUTION 
       ===================== -->
  <!-- assumes the dist target has been run -->
  <target name="create.pkg" description="Create JAX-WS svr4 package">
    <ant antfile="build-pkg.xml" target="create.pkg" inheritrefs="true"/>
  </target>

  <!-- =====================
       RPM DISTRIBUTION 
       ===================== -->
  <!-- assumes the dist target has been called -->
  <target name="create.rpm" description="Create JAX-WS RPM">
    <ant antfile="build-pkg.xml" target="create.rpm" inheritrefs="true"/>
  </target>

  <!-- =====================
       ZIP FILE DISTRIBUTION 
       ======================= -->
  <!-- assumes the dist target has been called -->
  <target name="create.zip" description="Create JAX-WS ZIP">
    <ant antfile="build-pkg.xml" target="create.zip" inheritrefs="true"/>
  </target>

  <!-- =======================
       HPUX DISTRIBUTION 
       ======================= -->
  <!-- assumes the dist target has been called -->
  <target name="create.hpux" description="Create HPUX pkg for JAX-WS">
    <ant antfile="build-pkg.xml" target="create.hpux" inheritrefs="true"/>
  </target>

</project>
