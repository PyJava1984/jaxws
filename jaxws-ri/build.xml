<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="JAXWS-RI" default="main" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <import file="etc/build-bundle.xml"/>
  <import file="build-taskdefs.xml" />  

  <target name="runtime-compile-mustang" depends="prepare">
    <ant dir="${basedir}/rt"
        target="compile-mustang"
        inheritrefs="true"/>
    <ant dir="${basedir}/rt-fi"
        target="compile-mustang"
        inheritrefs="true"/>
  </target>

  <target name="javadocs-spi" depends="image">
    <javadoc packagenames="com.sun.xml.ws.spi.runtime.*, com.sun.tools.ws.spi.*"
         sourcepathref="all-source-path"
         destdir="${build.home}/javadocs/spi"
         author="false"
         version="false"
         windowtitle="${Name} Generated Documentation"
         doctitle="${Name}"
         bottom="Copyright &#169; 2005 Sun Microsystems, Inc. All Rights Reserved.">
        <classpath refid="tools.compile.classpath"/>
    </javadoc>
  </target>

    <target name="architecture-document" depends="prepare"
            description="generate architecture documents (which is just a glorified javadoc)">
      <mkdir dir="${build.home}/javadoc" />
      <taskdef name="sequence-diagram" classname="com.sun.xml.bind.taglets.SequenceDiagramTask">
        <classpath>
          <pathelement path="${basedir}/tools/lib/taglets.jar" />
        </classpath>
      </taskdef>
      <sequence-diagram
        src="${basedir}/javadoc"
        dest="${build.home}/javadoc"
        includes="**/*.seq" />

      <javadoc
            destdir="${build.home}/javadoc"
            use="true"
            author="false"
            version="false"
            windowtitle="JAX-WS RI"
            doctitle="JAX-WS RI"
            access="package">

      <doclet name="com.sun.xml.bind.taglets.CustomHtmlDoclet"
        path="${basedir}/tools/lib/taglets.jar">
      </doclet>

      <packageset dir="${basedir}/javadoc"/>
      <group title="Root Architecture Document" packages="jaxws" />

      <packageset dir="${basedir}/rt/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.*,com.sun.pept.*" />

      <packageset dir="${basedir}/servlet/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.*" />

      <packageset dir="${basedir}/transports/local/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.transport.local.*" />

      <packageset dir="${basedir}/tools/wscompile/src"/>
      <group title="Tools" packages="com.sun.tools.ws.*,com.sun.istack.*" />

      <link href="https://jaxb.dev.java.net/nonav/jaxb20-pr/api/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/jaxb-api"   />
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/j2se5.0"  />
      <link href="https://jaxb-architecture-document.dev.java.net/nonav/doc/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/jaxb-ri"  />

      <classpath refid="tools.compile.classpath"/>
    </javadoc>
    </target>

  <target name="generate-code" description="Just run the code generators. Designed to be invoked from IDE while developing the RI">
    <ant dir="${basedir}/rt"              target="generate-code" inheritrefs="true"/>
    <ant dir="${basedir}/tools/wscompile" target="generate-code" inheritrefs="true"/>
  </target>

  <target name="runtime-build-mustang" depends="runtime-compile-mustang">
    <!-- Copy resource files etc -->
    <copy todir="${basedir}/rt/build/classes">
      <fileset dir="${basedir}/rt/src">
        <include name="**/*.properties" />
      </fileset>
    </copy>

    <versionProp file="${basedir}/rt/build/classes/com/sun/xml/ws/version.properties" />

    <!-- Copying the manifest -->
    <copy file="${basedir}/rt/etc/manifest" todir="${basedir}/rt/build"/>
    <updateManifestWithVersion file="${basedir}/rt/build/manifest" />

    <jar jarfile="${build.home}/lib/jaxws-rt.jar"
        manifest="${basedir}/rt/build/manifest">
      <fileset dir="${basedir}/rt/build/classes"/>
      <fileset dir="${basedir}/rt-fi/build/classes"/>
      <fileset dir="${basedir}/rt-ha/build/classes"/>
    </jar>
  </target>

    <target name="docs" depends="prepare">
        <sequential>
            <exec executable="${mvn.exec}" failonerror="true">
                <arg line="-f"/>
                <arg line="${basedir}/docs/pom.xml"/>
                <arg line="clean"/>
                <arg line="package"/>
            </exec>
        </sequential>
    
        <copy todir="${build.home}/docs/">
            <fileset dir="${docs.home}/release-documentation/target/docbook/" excludes="*.fo" />
        </copy>
    </target>
  
  <target name="docs.clean">
     <sequential>
            <exec executable="${mvn.exec}" failonerror="true">
              <arg line="-f"/>
              <arg line="${basedir}/docs/pom.xml"/>
              <arg line="clean"/>                            
            </exec>
     </sequential>
  </target>
    
  <target name="doc-src-zip" depends="docs">
        <copy file="${docs.home}/release-documentation/target/release-documentation-${release.impl.version}-docbook.zip" tofile="${build.home}/release-notes-src.zip" />
  </target>

    <target name="clean" depends="jax-ws.clean, docs.clean">
        <ant dir="${basedir}/transports/local" target="clean"/>
    </target>
<!-- for now, this gets everything built -->
    <target name="image" depends="tools-build">
        <ant dir="transports/local" target="dist" inheritrefs="true"/>
        <!-- should I copy local transport jar to the build.home?  -->

        <copy todir="${build.home}">
            <fileset dir="."
                     includes="ThirdPartyLicense.txt, CDDL+GPLv2.txt, distributionREADME_WMforJava2.0.txt"/>
        </copy>
    </target>

  <target name="dist" depends="image, docs">
    <mkdir dir="${dist.home}"/>
    <mkdir dir="${dist20.home}"/>
    <mkdir dir="${dist20.home}/bin"/>
    <mkdir dir="${dist20.home}/lib"/>
    <mkdir dir="${dist20.home}/docs"/>
    <mkdir dir="${dist20.home}/samples"/>
      <copy tofile="${dist20.home}/build.xml" file="${build.home}/../etc/istackontomcat.xml">
          <filterset begintoken="@@" endtoken="@@">
            <filter token="SPEC_VERSION"
                    value="${release.spec.version}" />
            <filter token="IMPL_VERSION"
                    value="${release.impl.version}"/>
            <filter token="IMPL_VERSION_SUFFIX"
                    value="${release.impl.version.suffix}"/>
          </filterset>
      </copy>

    <copy    todir="${dist20.home}/bin">
      <fileset dir="${build.home}/bin"
          includes="wsimport.*, wsgen.*"/>
    </copy>

    <chmod perm="+x" file="${dist20.home}/bin/wsimport.sh"/>
    <chmod perm="+x" file="${dist20.home}/bin/wsgen.sh"/>

    <copy todir="${dist20.home}/lib">
        <fileset dir="${build.home}/lib" includes="*.jar" excludes="args4j*.jar,istack*.jar"/>
    </copy>
  	
    <!-- copy plugin libs (including dependences) to separate directory  -->
    <mkdir dir="${dist20.home}/lib/plugins" />
    <copy todir="${dist20.home}/lib/plugins">
      <fileset dir="${build.home}/plugins_lib" includes="*eclipselink*.*" />
    </copy>
    <move todir="${dist20.home}/lib/plugins" file="${dist20.home}/lib/common.sdo.jar" />
    <move todir="${dist20.home}/lib/plugins" file="${dist20.home}/lib/eclipselink.jar" />
    	
    <copy    todir="${dist20.home}/docs">
      <fileset dir="${build.home}/docs"/>
    </copy>

    <copy    todir="${dist20.home}/samples">
      <fileset dir="samples" includes="**/common_resources/**"/>
      <fileset dir="samples" includes="**/certs/**" excludes="**/CVS/**"/>  
    </copy>

    <copy todir="${dist20.home}/samples">
        <fileset dir="samples" includes="**" excludes="**/certs/**, **/common_resources/**,**/CVS/**" />
        <filterset begintoken="@@" endtoken="@@">
          <filter token="SPEC_VERSION" 
                  value="${release.spec.version}" />
          <filter token="IMPL_VERSION"
                  value="${release.impl.version}"/>
          <filter token="IMPL_VERSION_SUFFIX"
                  value="${release.impl.version.suffix}"/>
        </filterset>
    </copy>

    <copy todir="${dist20.home}/samples/restful/etc">
        <fileset dir="lib" includes="servlet.jar"/>
    </copy>

    <copy todir="${dist20.home}">
        <fileset dir="${build.home}" includes="*.txt"/>
    </copy>

    <!-- add a copy of the license and README files to the top level -->
    <copy todir="${dist20.home}">
        <fileset dir="." includes="ThirdPartyLicense.txt, CDDL+GPLv2.txt, distributionREADME_WMforJava2.0.txt, LICENSE.txt" />
    </copy>

    <copy todir="${dist20.home}"
          file="README" />
  </target>
  
  <target name="dist.zip" description="create a stand-alone distribution image of the JAX-WS RI"
          depends="dist">
    <zip file="${build.home}/jaxws-ri.zip">
      <fileset dir="${dist.home}" />
    </zip>
  </target>

  <target name="dist-zip-with-src" depends="src.zip, dist.zip"/>

  <target name="src.zip" description="create source zip bundles of the JAX-WS RI" depends="dist">
    <zip file="${dist20.home}/lib/jaxws-rt.src.zip">
      <!-- exclude properties files to avoid duplicates as they are copied to build/classes already-->
      <fileset dir="${basedir}/rt/src" excludes="**/*.properties"/>
      <!-- the following is needed as some properties file are generated dynamically -->
      <fileset dir="${basedir}/rt/build/classes" includes="**/*.properties"/>
      <zipfileset dir="${basedir}/rt/etc/" includes="com.sun.*,javax.xml.ws.*" prefix="META-INF/services"/>  
      <fileset dir="${basedir}/rt-fi/src" />
      <fileset dir="${basedir}/rt-ha/src"/>
      <fileset dir="${basedir}/servlet/src"/>
      <fileset dir="${basedir}/transports/local/src"/>
      <fileset dir="${basedir}/rt/build/gen-src/"/>
    </zip>
    <zip file="${dist20.home}/lib/jaxws-tools.src.zip">
      <!-- exclude properties files to avoid duplicates as they are copied to build/classes already-->
      <fileset dir="${basedir}/tools/wscompile/src" excludes="**/*.properties"/>
      <fileset dir="${basedir}/tools/wscompile/build/gen-src/"/>
      <!-- the following is needed as some properties file are generated dynamically -->
      <fileset dir="${basedir}/tools/wscompile/build/classes" includes="**/*.properties"/>
      <zipfileset dir="${basedir}/tools/wscompile/src/META-INF/services" includes="com.sun.*" prefix="META-INF/services"/>
    </zip>
    <!--
        <zip file="${dist20.home}/lib/jaxws-libs.src.zip">
          <fileset dir="${basedir}/lib" includes="*-source.jar" excludes="jaxws-asm-source.jar,junit-source.jar"/>
        </zip>
    -->
    <mkdir dir="${dist20.home}/lib/plugins" />
    <zip file="${dist20.home}/lib/plugins/jaxws-eclipselink-plugin.src.zip">
      <fileset dir="${basedir}/eclipselink_jaxb/src"/>
      <fileset dir="${basedir}/eclipselink_jaxb/build/classes" includes="META-INF/services/*"/>
    </zip>
    <zip file="${dist20.home}/lib/plugins/sdo-eclipselink-plugin.src.zip">
      <fileset dir="${basedir}/eclipselink_sdo/src"/>
      <fileset dir="${basedir}/eclipselink_sdo/build/classes" includes="META-INF/services/*"/>
    </zip>
  </target>

    <target name="jdk-jaxws-src.zip" description="create source zip bundles of the JAX-WS in JDK" depends="src.zip">
        <!-- not needed as we create another bundle with all libs -->
        <!--<delete file="${dist20.home}/lib/jaxws-libs.src.zip"/> -->
        <echo message="dist.home=${dist.home}" />
        <echo message="basedir=${basedir}" />
        <zip file="${dist.home}/jdk-jaxws-libs.src.zip">
            <fileset dir="${dist20.home}/lib" includes="jaxws-rt.src.zip"/>
            <fileset dir="${dist20.home}/lib" includes="jaxws-tools.src.zip"/>
            <!-- include everything except jaxws-asm-source.jar, junit-source.jar, ant-source.jar -->
            <fileset dir="${basedir}/lib">
                <include name="*source*.jar" />
                <exclude name="junit-source.jar" />
                <!--TODO: seems to be we have to integrate ....-->
                <!--<exclude name="jaxws-asm-source.jar" />-->
                <exclude name="ant-source.jar" />
                <exclude name="woodstox-core-asl-source.jar" />

                <!--also weren't integrated before ...-->
                <exclude name="ha-api-source.jar" />
                <exclude name="stax2-api-source.jar" />
            </fileset>
        </zip>
        <delete file="${dist20.home}/lib/jaxws-rt.src.zip"/>
        <delete file="${dist20.home}/lib/jaxws-tools.src.zip"/>
    </target>

    <target name="hudson" depends="clean, dist.zip, src.zip, generate-weekly-source, javadocs, doc-src-zip" />

   <target name="replace-binaries-with-re-build">
      <!--
        this target replaces the dist jars with RE BUILD.
        Here JAXWS_RE_BUILD points to the url of jax-ws binaries where jax-ws jars can be found.
      -->
      <get src="${JAXWS_RE_BUILD}/jaxws-rt.jar" dest="${dist20.home}/lib/jaxws-rt.jar"/>
      <get src="${JAXWS_RE_BUILD}/jaxws-tools.jar" dest="${dist20.home}/lib/jaxws-tools.jar"/>
      <get src="${JAXWS_RE_BUILD}/jsr181-api.jar" dest="${dist20.home}/lib/jsr181-api.jar"/>
  </target>

    <!--<property name="maven.repo.local" value="c:/Users/mkos/.m2/repository"/>-->
    <property name="maven.ant.task.jar" value="maven-ant-tasks-2.0.10.jar"/>
    <property name="java.net.staging.repo" value="https://maven.java.net/service/local/staging/deploy/maven2/"/>
    <property name="java.net.snapshot.repo" value="https://maven.java.net/content/repositories/snapshots/"/>
    <property name="mvn.proxy.args" value="-Dhttps.proxyHost=www-proxy.us.oracle.com -Dhttps.proxyPort=80 -Dhttp.proxyHost=www-proxy.us.oracle.com -Dhttp.proxyPort=80"/>
    <property name="mavenrepo.url" value="https://maven.java.net/content/groups/public"/>
	
  <!-- TODO - come up with a better scheme than using hard-coded value shere. -->
  <property name="eclipselink.version" value="2.3.1-M6"/>
  <property name="common.sdo.version" value="2.1.1"/>

    <target name="check-maven-ant-task">
        <available property="maven.ant.task.available" value="true" file="${lib.home}/${maven.ant.task.jar}"
                   type="file"/>
    </target>

    <target name="setproxy">
        <property  name="proxy.host" value="www-proxy.us.oracle.com"/>
        <property name="proxy.port" value="80"/>

      <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
    </target>

    <target name="init-maven-ant" depends="check-maven-ant-task,setproxy" unless="maven.ant.task.available">
        <echo message="Fetching Maven ant task..."/>
        <get src="http://archive.apache.org/dist/maven/binaries/${maven.ant.task.jar}"
             dest="${lib.home}/${maven.ant.task.jar}" verbose="true"/>
    </target>

    <target name="re-build"
        description="RE build target">
      <antcall target="generate-binary">
        <param name="compile.debug" value="true"/>
      </antcall>
      <antcall target="generate-weekly-source">
        <param name="compile.debug" value="true"/>
      </antcall>
      <antcall target="generate-bundle-for-licensee" />
      <copy tofile="${build.home}/jaxws-${release.jar.version}.zip"
         file="${build.home}/jaxws-ri.zip"/>
      <move tofile="${build.home}/jaxws-${release.jar.version}-src.zip"
         file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.zip"/>
    </target>

    <target name="generate-binary"
        description="generate java.net binary distribution">
      <antcall target="dist.zip">
        <param name="compile.debug" value="true"/>
      </antcall>
      <tstamp/>
    </target>
    
    <target name="generate-weekly-binary"
        description="generate java.net binary distribution">
      <antcall target="generate-binary">
        <param name="compile.debug" value="true"/>
      </antcall>
      <delete file="${build.home}/jaxws-ri.zip" />
    </target>

    <patternset id="src-includes"
                description="This pattern set defines which files will be in/excluded in the src bundle">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
    </patternset>

    <target name="generate-weekly-source"
        depends="dist"
        description="generate sources for java.net binary distribution">
      <tstamp/>
            
      <!-- create the zip file contents -->
      <property name="source.drop.dir" value="${build.home}/source-bundle"/>
      <property name="source.dist.dir.name" value="jaxws-ri-${DSTAMP}"/>
      <property name="src.installer.tmp" value="${build.home}/src-tmp" />
      <delete dir="${source.drop.dir}"/>
      <mkdir dir="${source.drop.dir}"/>
      <mkdir dir="${source.drop.dir}/jaxws-ri/lib"/>

        <zip destfile="${source.drop.dir}/jaxws-src.zip" duplicate="fail" whenempty="fail">
            <zipfileset dir="rt/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt-fi/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt-ha/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt/build/gen-src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>

            <zipfileset dir="tools/wscompile/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="tools/wscompile/build/gen-src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="servlet/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="${basedir}/etc" includes="src-bundle.xml"
                        fullpath="${source.dist.dir.name}/build.xml"/>

            <!-- additional jar files -->
            <zipfileset dir="${basedir}/build/lib" includes="*.jar" excludes="ant*.* junit.jar" prefix="${source.dist.dir.name}/lib"/>
            <zipfileset dir="servlet/lib" includes="*.jar" prefix="${source.dist.dir.name}/lib"/>

            <!-- license files -->
            <zipfileset dir="." includes="ThirdPartyLicense.txt, CDDL+GPLv2.txt, LICENSE.txt"
                        prefix="${source.dist.dir.name}"/>

        </zip>

        <!-- test the generated source bundle -->
        <delete dir="${src.installer.tmp}" failonerror="false" />
        <mkdir dir="${src.installer.tmp}" />
        <unzip dest="${src.installer.tmp}" src="${source.drop.dir}/jaxws-src.zip"/>
        <ant dir="${src.installer.tmp}/${source.dist.dir.name}" inheritAll="false" inheritRefs="false"/>

        <!-- delete the srctmp dir -->
        <delete dir="${src.installer.tmp}"/>

      <!-- 1.X version opens to a zip file, so wrap our zip
          in another one to send to installer -->
      <zip destfile="${source.drop.dir}/jaxws-src-installer.zip">
        <zipfileset file="${source.drop.dir}/jaxws-src.zip"/>
      </zip>

      <copy file="${source.drop.dir}/jaxws-src.zip" tofile="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.zip"/>  
      <delete dir="${source.drop.dir}"/>
    </target>

    <target name="generate-bundle-for-licensee"
            depends="prepare"
            description="generate sources bundle for licensees">
        <tstamp/>

        <get src="http://hudson-sca.us.oracle.com/job/tlda-license/lastSuccessfulBuild/artifact/TLDA_SCSL_Licensees_License_Notice.txt" dest="${build.home}/TLDA_SCSL_Licensees_License_Notice.txt"/>
                  
        <!-- create the zip file contents -->
        <property name="source.drop.dir" value="${build.home}/source-bundle"/>
        <property name="source.dist.dir.name" value="jaxws-ri-${DSTAMP}"/>
        <property name="src.installer.tmp" value="${build.home}/src-tmp"/>
        <delete dir="${source.drop.dir}"/>
        <mkdir dir="${source.drop.dir}"/>
        <mkdir dir="${source.drop.dir}/jaxws-ri/lib"/>

        <zip destfile="${build.home}/jaxws-${release.jar.version}-src-licensee.zip"  duplicate="fail" whenempty="fail">
            <zipfileset dir="rt" prefix="${source.dist.dir.name}/rt" defaultexcludes="true" includes="build.xml, src/**, build/gen-src/**, etc/**" excludes="test/**"/>
            <zipfileset dir="rt-fi" prefix="${source.dist.dir.name}/rt-fi" defaultexcludes="true" includes="build.xml, src/**"/>
            <zipfileset dir="rt-ha" prefix="${source.dist.dir.name}/rt-ha" defaultexcludes="true" includes="build.xml, src/**,lib/**"/>
            <zipfileset dir="tools" prefix="${source.dist.dir.name}/tools" defaultexcludes="true" includes="etc/**, wscompile/build.xml, wscompile/src/**, wscompile/build/gen-src/**, resourcegen/**, bin/**"/>
            <zipfileset dir="servlet" prefix="${source.dist.dir.name}/servlet" defaultexcludes="true" includes="build.xml, src/**, lib/**, etc/**"/>
            <zipfileset dir="httpspi-servlet" prefix="${source.dist.dir.name}/httpspi-servlet" defaultexcludes="true" includes="build.xml, src/**, lib/**"/>
            <zipfileset dir="${basedir}/etc" includes="build-bundle.xml"
                        fullpath="${source.dist.dir.name}/build.xml"/>
            <zipfileset dir="${basedir}/etc" prefix="${source.dist.dir.name}/etc" includes="CDDL+GPLv2.xml" />
            <zipfileset dir="${basedir}/etc" includes="src-build-readme.txt"
                        fullpath="${source.dist.dir.name}/README"/>
            <!-- additional jar files -->
            <zipfileset dir="${basedir}/lib" includes="*.jar" excludes="ant*.jar, junit*.jar, *-javadoc.jar, commons-jelly-tags-jsl-1.0.jar, sjsxp.jar, maven-ant-tasks-2.0.10.jar, javax.mail_1.4.jar, html*.jar"
                        prefix="${source.dist.dir.name}/lib"/>

            <!-- license files -->
            <zipfileset dir="."
                        includes="ThirdPartyLicense.txt, distributionREADME_WMforJava2.0.txt, project.properties, build-j2se.xml"
                        prefix="${source.dist.dir.name}"/>
            <zipfileset dir="${build.home}"
                        includes="TLDA_SCSL_Licensees_License_Notice.txt"
                        prefix="${source.dist.dir.name}"/>
        </zip>        
    </target>

  <!-- =====================
       SVR4 DISTRIBUTION 
       ===================== -->
  <!-- assumes the dist target has been run -->
  <target name="create.pkg" description="Create JAX-WS svr4 package">
    <ant antfile="build-pkg.xml" target="create.pkg" inheritrefs="true"/>
  </target>

  <!-- =====================
       RPM DISTRIBUTION 
       ===================== -->
  <!-- assumes the dist target has been called -->
  <target name="create.rpm" description="Create JAX-WS RPM">
    <ant antfile="build-pkg.xml" target="create.rpm" inheritrefs="true"/>
  </target>

  <!-- =====================
       ZIP FILE DISTRIBUTION 
       ======================= -->
  <!-- assumes the dist target has been called -->
  <target name="create.zip" description="Create JAX-WS ZIP">
    <ant antfile="build-pkg.xml" target="create.zip" inheritrefs="true"/>
  </target>

  <!-- =======================
       HPUX DISTRIBUTION 
       ======================= -->
  <!-- assumes the dist target has been called -->
  <target name="create.hpux" description="Create HPUX pkg for JAX-WS">
    <ant antfile="build-pkg.xml" target="create.hpux" inheritrefs="true"/>
  </target>



    <!-- findbugs -->
     <property name="findbugs.home" value="${basedir}/etc/findbugs/"/>

    <path id="findbugs.class">
        <fileset dir="${findbugs.home}/lib" includes="*.jar"/>
    </path>
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <classpath refid="findbugs.class"/>
    </taskdef>


    <target name="findbugs">
        <findbugs home="${findbugs.home}"
                  output="xml"
                  outputFile="${build.home}/jaxws-findbugs.xml"
                  jvmargs="-Xms64m -Xmx256m">
            <auxclasspath>
                <fileset dir="${build.home}/lib" includes="*.jar" excludes="jaxws-rt.jar, jaxws-tools.jar"/>
                <fileset file="${java.home}/../lib/tools.jar"/>
                <fileset dir="${basedir}/servlet/lib" includes="javax.servlet.jar"/>
                <fileset dir="${basedir}/lib" includes="ant.jar"/>
            </auxclasspath>
            <sourcepath>
                <pathelement location="${basedir}/rt/src"/>
                <pathelement location="${basedir}/tools/wscompile/src"/>
                <pathelement location="${basedir}/servlet/src"/>
                <pathelement location="${basedir}/rt-ha/src"/>
            </sourcepath>
            <class location="${build.home}/lib/jaxws-rt.jar"/>
            <class location="${build.home}/lib/jaxws-tools.jar"/>
        </findbugs>
    </target>


    <target name="findbugs-html" depends="main">
        <findbugs home="${findbugs.home}"
                  output="html"
                  outputFile="${build.home}/jaxws-findbugs.html"
                  jvmargs="-Xms64m -Xmx256m ">
            <auxclasspath>
                <fileset dir="${build.home}/lib" includes="*.jar" excludes="jaxws-rt.jar, jaxws-tools.jar"/>
                <fileset file="${java.home}/../lib/tools.jar"/>
                <fileset dir="${basedir}/servlet/lib" includes="javax.servlet.jar"/>
                <fileset dir="${basedir}/lib" includes="ant.jar"/>
            </auxclasspath>
            <sourcepath>
                <pathelement location="${basedir}/rt/src"/>
                <pathelement location="${basedir}/tools/wscompile/src"/>
                <pathelement location="${basedir}/servlet/src"/>
            </sourcepath>
            <class location="${build.home}/lib/jaxws-rt.jar"/>
            <class location="${build.home}/lib/jaxws-tools.jar"/>
        </findbugs>
    </target>


    <target name="test" description="Run the unit tests in all subprojects">
        <subant target="test" inheritrefs="true">
            <fileset dir="${basedir}">
                <include name="rt/build.xml"/>
                <include name="tools/wscompile/build.xml"/>
            </fileset>
        </subant>
    </target>

    <target name="overlay-eclipselink" depends="init-maven-ant"
        description="fetch the latest eclipselink.jar from the Maven repository">
        <path id="maven-ant-tasks.classpath" path="${lib.home}/${maven.ant.task.jar}"/>
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
            classpathref="maven-ant-tasks.classpath"/>
        <artifact:dependencies pathId="dependency.classpath" filesetId="dependency.fileset"> 
            <dependency groupId="org.eclipse.persistence" artifactId="eclipselink"
                version="2.3.1-SNAPSHOT"/>
            <remoteRepository url="http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo"/>
        </artifact:dependencies>

        <copy todir="${basedir}/eclipselink_jaxb/lib">
            <fileset refid="dependency.fileset"/>
                <mapper>
                    <mergemapper to="eclipselink.jar"/>
                    <flattenmapper/>
                </mapper>
        </copy>
    </target>

	<target name="prepare-endorsed" depends="init"
	        description="prepare the endorsed folder for a JDK 1.6 build">
		<mkdir dir="${java.endorsed.dirs}"/>
		<copy todir="${java.endorsed.dirs}">
			<fileset
				dir="${basedir}/lib"
			    includes="jaxws-api.jar jaxb-api.jar javax.annotation.jar"/>
	    </copy>
	</target>

    <macrodef name="prepare-pom">
            <attribute name="module"/>
            <sequential>
                <fail unless="jar.suffix">jar.suffix property needs to be defined</fail>
                <copy file="etc/poms/@{module}.pom" tofile="build/maven2-repo/@{module}.pom" overwrite="true">
                    <filterset>
                        <filter token="API_VERSION" value="${release.api.version}"/>
                        <filter token="JAXB_API_VERSION" value="${jaxb.api.version}"/>
                        <filter token="SAAJ_API_VERSION" value="${saaj-api.version}"/>
                        <filter token="JSR_181_API_VERSION" value="${jsr181.version}"/>
                        <filter token="JSR_250_API_VERSION" value="${jsr250.version}"/>
                        <filter token="JAXB_VERSION" value="${jaxb.impl.version}"/>
                        <filter token="SAAJ_VERSION" value="${saaj-impl.version}"/>
                        <filter token="XMLSTREAMBUFFER_VERSION" value="${xmlstreambuffer.version}"/>
                        <filter token="WOODSTOX_CORE_VERSION" value="${woodstox.version}"/>
                        <filter token="STAX2_API_VERSION" value="${stax2-api.version}"/>
                        <filter token="FI_VERSION" value="${fi.version}"/>
                        <filter token="STAX_EX_VERSION" value="${stax-ex.version}"/>
                        <filter token="MIMEPULL_VERSION" value="${mimepull.version}"/>
                        <filter token="POLICY_VERSION" value="${policy.version}"/>
                        <filter token="GMBAL_API_VERSION" value="${gmbal.version}"/>
                        <filter token="HA_API_VERSION" value="${ha-api.version}"/>
                        <filter token="ECLIPSELINK_VERSION" value="${eclipselink.version}"/>
                        <filter token="COMMON_SDO_VERSION" value="${common.sdo.version}"/>
                        <filter token="VERSION" value="${jar.suffix}"/>
                    </filterset>
                </copy>
            </sequential>
        </macrodef>

    <condition property="mvn.exec" value="mvn.bat" else="mvn">
        <os family="windows"/>
    </condition>

   <macrodef name="mvn.install.file">
        <attribute name="command" default="install:install-file"/>
        <attribute name="repo" default="${maven.repo.local}"/>

        <attribute name="jar"/>
        <attribute name="pom"/>
        <attribute name="classifier" default=""/>
        <attribute name="extra-args" default=""/>
        <sequential>
            <exec executable="${mvn.exec}" failonerror="true">
                <arg line="@{command}"/>
                <arg line="-Dfile=@{jar}"/>
                <arg line="-Dclassifier=@{classifier}"/>
                <arg line="-DpomFile=@{pom}"/>
                <arg line="-DlocalRepositoryPath=@{repo}"/>
                <arg line="@{extra-args}"/>
            </exec>
        </sequential>
    </macrodef>

   <macrodef name="mvn.publish.snapshot.file">
        <attribute name="command" default="deploy:deploy-file"/>
        <attribute name="repoid" default="jvnet-nexus-snapshots"/>
        <attribute name="repo" default="${maven.repo.local}"/>

        <attribute name="jar"/>
        <attribute name="pom"/>
        <attribute name="classifier" default=""/>
        <attribute name="password" default=""/>
        <attribute name="extra-args" default=""/>
        <sequential>
            <exec executable="${mvn.exec}" failonerror="true">
                <arg line="@{command}"/>
                <arg line="-Dfile=@{jar}"/>
                <arg line="-Dclassifier=@{classifier}"/>
                <arg line="-DpomFile=@{pom}"/>
                <arg line="-DuniqueVersion=false"/>
                <arg line="-Durl=@{repo}"/>
                <arg line="-DrepositoryId=@{repoid}"/>
                <arg line="@{extra-args}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="mvn.publish.release.file">
        <attribute name="command" default="gpg:sign-and-deploy-file"/>
        <attribute name="repoid" default="jvnet-nexus-staging"/>
        <attribute name="repo" default="${maven.repo.local}"/>

        <attribute name="jar"/>
        <attribute name="pom"/>
        <attribute name="classifier" default=""/>
        <attribute name="password" default="${gpg.password}"/>
        <attribute name="extra-args" default=""/>
        <sequential>
            <exec executable="${mvn.exec}" failonerror="true">
                <arg line="@{command}"/>
                <arg line="-Dfile=@{jar}"/>
                <arg line="-Dclassifier=@{classifier}"/>
                <arg line="-DpomFile=@{pom}"/>
                <arg line="-DuniqueVersion=false"/>
                <arg line="-Durl=@{repo}"/>
                <arg line="-DrepositoryId=@{repoid}"/>
                <arg line="-Dgpg.passphrase=@{password}"/>
                <arg line="@{extra-args}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="mvn.install.snapshot.module">
        <attribute name="module"/>
        <attribute name="libpath" default="lib"/>
        <attribute name="extra-args" default=""/>
        <attribute name="repo" default="${maven.repo.local}"/>
        <sequential>
            <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT"/>
            <prepare-pom module="@{module}"/>
            <mvn.install.file jar="${dist20.home}/@{libpath}/@{module}.jar" pom="build/maven2-repo/@{module}.pom"
                              repo="@{repo}" extra-args="@{extra-args}"/>
            <mvn.install.file jar="${dist20.home}/@{libpath}/@{module}.src.zip" pom="build/maven2-repo/@{module}.pom"
                              repo="@{repo}" extra-args="@{extra-args}"
                              classifier="sources"/>
            <mvn.install.file jar="${dist20.home}/@{libpath}/@{module}-javadoc.jar"
                              pom="build/maven2-repo/@{module}.pom" repo="@{repo}" extra-args="@{extra-args}"
                              classifier="javadoc"/>
        </sequential>
    </macrodef>

    <macrodef name="mvn.publish.snapshot.module">
        <attribute name="module"/>
        <attribute name="libpath" default="lib"/>
        <attribute name="extra-args" default=""/>
        <attribute name="repo" default="${maven.repo.local}"/>
        <sequential>
            <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT"/>
            <prepare-pom module="@{module}"/>
            <mvn.publish.snapshot.file jar="${dist20.home}/@{libpath}/@{module}.jar" pom="build/maven2-repo/@{module}.pom"
                                       repo="@{repo}" extra-args="@{extra-args}"/>
            <mvn.publish.snapshot.file jar="${dist20.home}/@{libpath}/@{module}.src.zip" pom="build/maven2-repo/@{module}.pom"
                                       repo="@{repo}" extra-args="@{extra-args}"
                                       classifier="sources"/>
            <mvn.publish.snapshot.file jar="${dist20.home}/@{libpath}/@{module}-javadoc.jar"
                                       pom="build/maven2-repo/@{module}.pom" repo="@{repo}" extra-args="@{extra-args}"
                                       classifier="javadoc"/>
        </sequential>
    </macrodef>

    <macrodef name="mvn.install.snapshot.zip">
        <attribute name="module"/>
        <attribute name="extra-args" default=""/>
        <attribute name="repo" default="${maven.repo.local}"/>
        <sequential>
            <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT"/>
            <prepare-pom module="@{module}"/>
            <mvn.install.file jar="${build.home}/@{module}.zip" pom="build/maven2-repo/@{module}.pom"
                              repo="@{repo}" extra-args="@{extra-args}"/>
        </sequential>
    </macrodef>

    <macrodef name="mvn.publish.snapshot.zip">
        <attribute name="module"/>
        <attribute name="extra-args" default=""/>
        <attribute name="repo" default="${maven.repo.local}"/>
        <sequential>
            <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT"/>
            <prepare-pom module="@{module}"/>
            <mvn.publish.snapshot.file jar="${build.home}/@{module}.zip" pom="build/maven2-repo/@{module}.pom"
                                       repo="@{repo}" extra-args="@{extra-args}"/>
        </sequential>
    </macrodef>

    <macrodef name="mvn.publish.release.module">
        <attribute name="module"/>
        <attribute name="libpath" default="lib"/>
        <attribute name="repo" default="${maven.repo.local}"/>
        <attribute name="extra-args" default=""/>
        <sequential>
            <property name="jar.suffix" value="${release.impl.version}"/>
            <prepare-pom module="@{module}"/>
            <mvn.publish.release.file jar="${dist20.home}/@{libpath}/@{module}.jar" pom="build/maven2-repo/@{module}.pom"
                                      repo="@{repo}" extra-args="@{extra-args}"/>
            <mvn.publish.release.file jar="${dist20.home}/@{libpath}/@{module}.src.zip" pom="build/maven2-repo/@{module}.pom"
                                      repo="@{repo}" extra-args="@{extra-args}"
                                      classifier="sources"/>
            <mvn.publish.release.file jar="${dist20.home}/@{libpath}/@{module}-javadoc.jar"
                                      pom="build/maven2-repo/@{module}.pom" repo="@{repo}" extra-args="@{extra-args}"
                                      classifier="javadoc"/>
        </sequential>
    </macrodef>

    <macrodef name="mvn.publish.release.zip">
        <attribute name="module"/>
        <attribute name="repo" default="${maven.repo.local}"/>
        <attribute name="extra-args" default=""/>
        <sequential>
            <property name="jar.suffix" value="${release.impl.version}"/>
            <prepare-pom module="@{module}"/>
            <mvn.publish.release.file jar="${build.home}/@{module}.zip" pom="build/maven2-repo/@{module}.pom"
                                      repo="@{repo}" extra-args="@{extra-args}"/>
        </sequential>
    </macrodef>

    <target  name="mvn.install.snapshots.local">
        <fail unless="maven.repo.local">maven.repo.local property needs to be set</fail>
        <mvn.install.snapshot.module module="jaxws-rt"/>
        <mvn.install.snapshot.module module="jaxws-tools"/>
        <mvn.install.snapshot.zip module="jaxws-ri"/>
        <mvn.install.snapshot.module module="jaxws-eclipselink-plugin" libpath="lib/plugins" />
        <mvn.install.snapshot.module module="sdo-eclipselink-plugin" libpath="lib/plugins" />
    </target>
    
    <target  name="mvn.publish.snapshots.local">
        <fail unless="maven.repo.local">maven.repo.local property needs to be set</fail>
        <mvn.publish.snapshot.module module="jaxws-rt"/>
        <mvn.publish.snapshot.module module="jaxws-tools"/>
        <mvn.publish.snapshot.zip module="jaxws-ri"/>
        <mvn.publish.snapshot.module module="jaxws-eclipselink-plugin" libpath="lib/plugins" />
        <mvn.publish.snapshot.module module="sdo-eclipselink-plugin" libpath="lib/plugins" />
    </target>
    
    <target name="mvn.publish.release.local">
        <fail unless="maven.repo.local">maven.repo.local property needs to be set</fail>
        <mvn.publish.release.module module="jaxws-rt"/>
        <mvn.publish.release.module module="jaxws-tools"/>
        <mvn.publish.release.zip module="jaxws-ri"/>
        <mvn.publish.release.module module="jaxws-eclipselink-plugin" libpath="lib/plugins" />
        <mvn.publish.release.module module="sdo-eclipselink-plugin" libpath="lib/plugins" />
    </target>

    <target  name="mvn.publish.promoted.local">
            <property  name="jar.suffix" value="${release.impl.version}-promoted-b${promoted.version}"/>
            <antcall  target="mvn.publish.release.local"/>
    </target>


    <target  name="mvn.publish.snapshots.remote">
        <mvn.publish.snapshot.module module="jaxws-rt" repo="${java.net.snapshot.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.snapshot.module module="jaxws-tools" repo="${java.net.snapshot.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.snapshot.zip module="jaxws-ri" repo="${java.net.snapshot.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.snapshot.module module="jaxws-eclipselink-plugin" libpath="lib/plugins" repo="${java.net.snapshot.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.snapshot.module module="sdo-eclipselink-plugin" libpath="lib/plugins" repo="${java.net.snapshot.repo}" extra-args="${mvn.proxy.args}"/>
    </target>

    <target name="mvn.publish.release.remote">
        <mvn.publish.release.module module="jaxws-rt" repo="${java.net.staging.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.release.module module="jaxws-tools" repo="${java.net.staging.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.release.zip module="jaxws-ri" repo="${java.net.staging.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.release.module module="jaxws-eclipselink-plugin" libpath="lib/plugins" repo="${java.net.staging.repo}" extra-args="${mvn.proxy.args}"/>
        <mvn.publish.release.module module="sdo-eclipselink-plugin" libpath="lib/plugins" repo="${java.net.staging.repo}" extra-args="${mvn.proxy.args}"/>
    </target>


    <target  name="mvn.publish.promoted.remote">
        <property  name="jar.suffix" value="${release.impl.version}-promoted-b${promoted.version}"/>
        <antcall  target="mvn.publish.release.remote"/>
        <propertyfile file="project.properties">
            <entry key="promoted.version" type="int" operation="+" value="1" pattern="00"/>
        </propertyfile>
        <exec executable="svn">
            <arg value="commit"/>
            <arg  value="-m"/>
            <arg  value="Pushed JAX-WS RI ${jar.suffix}, Incrementing the promoted version."/>
            <arg  value="project.properties"/>
        </exec>
    </target>

    <target name="www.release" if="jaxws.scm.username">
        <!-- Assumes hudson target has been already invoked -->
        <property name="www.upload.dir" value="${build.home}/www" />

        <mkdir dir="${www.upload.dir}" />

        <copy file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.zip" tofile="${www.upload.dir}/JAXWS${release.impl.version}${release.impl.version.suffix}-src-${DSTAMP}.zip" />
        <copy file="${build.home}/jaxws-ri.zip" tofile="${www.upload.dir}/JAXWS${release.impl.version}${release.impl.version.suffix}-${DSTAMP}.zip" />

        <copy todir="${www.upload.dir}/samples">
            <fileset dir="${dist20.home}/samples" />
        </copy>

        <copy todir="${www.upload.dir}/docs">
            <fileset dir="${build.home}/docs" />
        </copy>

        <copy file="${basedir}/docs/www/target/index.html" tofile="${www.upload.dir}/index.html" />

        <taskdef name="soimp" classname="com.sun.istack.tools.soimp.Soimp">
            <classpath>
                <pathelement path="${basedir}/lib/args4j.jar" />
                <pathelement path="${basedir}/lib/istack-commons-tools.jar" />
            </classpath>
        </taskdef>

        <soimp  dir="${www.upload.dir}"
                repository="${www.repository.url}/${release.impl.version}${release.impl.version.suffix}"
                username="${jaxws.scm.username}"
                password="${jaxws.scm.password}"
                create="true"
                commitMessage="JAX-WS-${release.impl.version}${release.impl.version.suffix}" />
    </target>

</project>
