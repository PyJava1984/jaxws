<?xml version="1.0"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!-- ************ JAXWS build file ************************************** -->


<project name="jax-ws" default="main" basedir=".">

    <property name="Name" value="JAX-WS RI"/>

    <property name="build.home" value="${basedir}/build"/>
    <property name="lib.home" value="${basedir}/lib"/>
    <property name="ant.home" value="${basedir}/lib"/>
    <!-- The base directory for docs -->
    <property name="docs.home" value="${basedir}/docs"/>
    <!-- The base directory for distribution targets -->
    <property name="dist.home" value="${basedir}/dist"/>
    <property name="dist20.home" value="${dist.home}/jaxws-ri"/>


    <!-- this property is used by "wsgen/wsimport -version".
 It should be set via the RE build
 scripts via 'ant -Dbuild.id="b08"' otherwise the current date and time
 will be used -->
    <tstamp>
        <format property="now" pattern="MM/dd/yyyy hh:mm aa" unit="hour" locale="en_US"/>
    </tstamp>

    <property file="${user.home}/build.properties"/>
    <!-- User local        -->
    <property file="build.properties"/>
    <!-- Component local   -->
    <property file="../build.properties"/>
    <!-- Commons local     -->
    <property file="project.properties"/>
    <property name="build.id" value="${now}(${user.name})"/>
    <property name="build.version" value="${Name} ${release.impl.version}-${build.id}-${release.impl.version.suffix}"/>
    <echo message="The build id is: ${build.version}"/>

    <path id="runtime.compile.classpath">
        <fileset dir="${lib.home}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="tools.compile.classpath">
        <path refid="runtime.compile.classpath"/>
        <pathelement location="${build.home}/lib/jaxws-rt.jar"/>
        <pathelement location="${java.home}/../lib/tools.jar"/>
    </path>

    <target name="init">
        <echo message="-------- ${Name} ${release.impl.version} --------"/>
    </target>

    <target name="prepare" depends="init">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/lib"/>
        <mkdir dir="${build.home}/bin"/>
        <mkdir dir="${build.home}/samples"/>
    </target>

    <target name="runtime-compile" depends="prepare">
        <ant dir="${basedir}/rt" target="compile" inheritrefs="true"/>
        <ant dir="${basedir}/rt-fi" target="compile" inheritrefs="true"/>
        <ant dir="${basedir}/servlet" target="compile" inheritrefs="true"/>
    </target>

    <path id="all-source-path">
        <pathelement path="${basedir}/rt/src"/>
        <pathelement path="${basedir}/rt-fi/src"/>
        <pathelement path="${basedir}/servlet/src"/>
        <pathelement path="${basedir}/tools/wscompile/src"/>
    </path>


    <target name="javadocs" depends="image">
        <javadoc
                packagenames=".,com.sun.xml.ws.*,com.sun.pept.*,javax.xml.ws.*,javax.xml.soap.*,javax.xml.bind.*,com.sun.tools.ws.*"
                sourcepathref="all-source-path"
                destdir="${build.home}/javadocs/"
                author="false"
                version="false"
                windowtitle="${Name} Generated Documentation"
                doctitle="${Name}"
                bottom="Copyright &#169; 2005 Sun Microsystems, Inc. All Rights Reserved.">
            <classpath refid="runtime.compile.classpath"/>
        </javadoc>
    </target>

    <macrodef name="versionProp"
              description="generates a version property file">
        <attribute name="file"/>
        <sequential>
            <echo file="@{file}"
                    >build-id=${build.id}
                build-version=${build.version}
                major-version=${release.impl.version}
            </echo>
        </sequential>
    </macrodef>

    <macrodef name="updateManifestWithVersion"
              description="updates a jar manifest file with the version information">
        <attribute name="file"/>
        <sequential>
            <manifest mode="update" file="@{file}">
                <attribute name="Build-Id" value="${build.id}"/>
                <attribute name="Build-Version" value="${build.version}"/>
                <attribute name="Major-Version" value="${release.impl.version}"/>
            </manifest>
        </sequential>
    </macrodef>


    <target name="runtime-build" depends="runtime-compile">
        <!-- Copy resource files etc -->
        <copy todir="${basedir}/rt/build/classes">
            <fileset dir="${basedir}/rt/src">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <versionProp file="${basedir}/rt/build/classes/com/sun/xml/ws/util/version.properties"/>

        <!-- Copying the manifest -->
        <copy file="${basedir}/rt/etc/manifest" todir="${basedir}/rt/build"/>
        <updateManifestWithVersion file="${basedir}/rt/build/manifest"/>

        <jar jarfile="${build.home}/lib/jaxws-rt.jar"
             manifest="${basedir}/rt/build/manifest">
            <fileset dir="${basedir}/rt/build/classes"/>
            <fileset dir="${basedir}/rt-fi/build/classes"/>
            <fileset dir="${basedir}/servlet/build/classes"/>
            <fileset dir="${basedir}/rt/src" includes="**/*.xml"/>
        </jar>
    </target>

    <!-- runtime must be built before tools -->
    <target name="tools-compile" depends="runtime-build">
        <ant dir="${basedir}/tools/wscompile"
             target="compile"
             inheritrefs="true"/>
    </target>

    <target name="tools-build" depends="tools-compile">
        <!-- Copy resource files etc -->
        <copy todir="${basedir}/tools/wscompile/build/classes">
            <fileset dir="${basedir}/tools/wscompile/src">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <!-- copy bin scripts -->
        <copy todir="${build.home}/bin">
            <fileset dir="${basedir}/tools/bin"
                     includes="wsimport.sh, wsimport.bat wsgen.bat wsgen.sh"/>
        </copy>
        <chmod perm="+x" file="${build.home}/bin/*.sh"/>

        <copy todir="${build.home}/lib">
            <fileset dir="${lib.home}/"
                     includes="FastInfoset.jar, activation.jar, http.jar, jaxb-api.jar, jaxb-impl.jar, jaxb-xjc.jar, jaxws-api.jar, jaxws-rt.jar, jaxws-tools.jar, jsr173_api.jar, jsr181-api.jar, jsr250-api.jar, resolver.jar, saaj-api.jar, saaj-impl.jar, stax-ex.jar, streambuffer.jar"/>
        </copy>

        <antcall target="copy-sjsxp-libs"/>
        <antcall target="copy-woodstox-libs"/>

        <!-- Copying the manifest -->
        <copy file="${basedir}/tools/etc/manifest" todir="${basedir}/tools/wscompile/build"/>
        <updateManifestWithVersion file="${basedir}/tools/wscompile/build/manifest"/>

        <versionProp file="${basedir}/tools/wscompile/build/classes/com/sun/tools/ws/version.properties"/>

        <jar jarfile="${build.home}/lib/jaxws-tools.jar"
             manifest="${basedir}/tools/wscompile/build/manifest">
            <fileset dir="${basedir}/tools/wscompile/build/classes"/>
            <!-- sneaky but it's easy because this is just one class -->
            <fileset dir="${basedir}/tools/resourcegen/build/classes"/>
        </jar>
    </target>

    <target name="copy-woodstox-libs" description="Copies woodstox.jar into distribution jars" if="woodstox">
        <copy todir="${build.home}/lib">
            <fileset dir="${lib.home}/"
                     includes="woodstox.jar"/>
        </copy>
    </target>

    <target name="copy-sjsxp-libs" description="Copies woodstox.jar into distribution jars" unless="woodstox">
        <copy todir="${build.home}/lib">
            <fileset dir="${lib.home}/"
                     includes="sjsxp.jar"/>
        </copy>
    </target>

    <target name="clean">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
        <ant dir="${basedir}/rt" target="clean"/>
        <ant dir="${basedir}/rt-fi" target="clean"/>
        <ant dir="${basedir}/tools/wscompile" target="clean"/>
        <ant dir="${basedir}/servlet" target="clean"/>
        <ant dir="${basedir}/transports/local" target="clean"/>
    </target>

    <!-- for now, this gets everything built -->
    <target name="image" depends="tools-build">
        <ant dir="transports/local" target="dist" inheritrefs="true"/>
        <!-- should I copy local transport jar to the build.home?  -->

        <copy todir="${build.home}">
            <fileset dir="."
                     includes="ThirdPartyLicense.txt, CDDL-1.0-license.txt, distributionREADME_WMforJava2.0.txt"/>
        </copy>
    </target>

    <target name="main" depends="image" description="build everything into the build directory"/>


    <!-- =====================
   J2SE renaming
   ===================== -->
    <!-- assumes the dist target has been run -->
    <target name="j2se-integration" description="Prepare Sources for J2SE integration">
        <ant antfile="build-j2se.xml" target="j2se-integration" inheritrefs="true"/>
    </target>
</project>