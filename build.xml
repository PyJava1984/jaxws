<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- ************ JAXWS build file ************************************** -->



<project name="JAXWS-RI" default="main" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <import file="etc/build-bundle.xml"/>
  <import file="build-taskdefs.xml" />  
  <property name="v3-osgi.dir" value="${basedir}/v3-osgi"/>
  <property name="jn.m2" value="http://download.java.net/maven/2"/>
  <target name="runtime-compile-mustang" depends="prepare">
    <ant dir="${basedir}/rt"
        target="compile-mustang"
        inheritrefs="true"/>
    <ant dir="${basedir}/rt-fi"
        target="compile-mustang"
        inheritrefs="true"/>
  </target>


  <target name="javadocs-spi" depends="image">
    <javadoc packagenames="com.sun.xml.ws.spi.runtime.*, com.sun.tools.ws.spi.*"
         sourcepathref="all-source-path"
         destdir="${build.home}/javadocs/spi"
         author="false"
         version="false"
         windowtitle="${Name} Generated Documentation"
         doctitle="${Name}"
         bottom="Copyright &#169; 2005 Sun Microsystems, Inc. All Rights Reserved.">
        <classpath refid="tools.compile.classpath"/>
    </javadoc>
  </target>


    <target name="architecture-document" depends="prepare"
            description="generate architecture documents (which is just a glorified javadoc)">
      <mkdir dir="${build.home}/javadoc" />
      <taskdef name="sequence-diagram" classname="com.sun.xml.bind.taglets.SequenceDiagramTask">
        <classpath>
          <pathelement path="${basedir}/tools/lib/taglets.jar" />
        </classpath>
      </taskdef>
      <sequence-diagram
        src="${basedir}/javadoc"
        dest="${build.home}/javadoc"
        includes="**/*.seq" />

      <javadoc
            destdir="${build.home}/javadoc"
            use="true"
            author="false"
            version="false"
            windowtitle="JAX-WS RI"
            doctitle="JAX-WS RI"
            access="package">

      <doclet name="com.sun.xml.bind.taglets.CustomHtmlDoclet"
        path="${basedir}/tools/lib/taglets.jar">
      </doclet>

    <!--doclet name="wrappertaglet.WrapperTaglet" path="${basedir}/tools/lib/wrappertaglet.jar:${build.home}/lib/UmlGraph-4.4.jar:${basedir}/tools/lib/taglets.jar">
		<param name="-inferrel"/>
		<param name="-inferdep"/>
		<param name="-hide" value="java.*"/>
		<param name="-collpackages" value="java.util.*"/>
		<param name="-qualify"/>
		<param name="-postfixpackage"/>
		<param name="-nodefontsize" value="9"/>
		<param name="-nodefontpackagesize" value="7"/>
	</doclet-->
      <packageset dir="${basedir}/javadoc"/>
      <group title="Root Architecture Document" packages="jaxws" />

      <packageset dir="${basedir}/rt/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.*,com.sun.pept.*" />

      <packageset dir="${basedir}/servlet/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.*" />

      <packageset dir="${basedir}/transports/local/src"/>
      <group title="Runtime" packages="com.sun.xml.ws.transport.local.*" />

      <packageset dir="${basedir}/tools/wscompile/src"/>
      <group title="Tools" packages="com.sun.tools.ws.*,com.sun.istack.*" />

      <link href="https://jaxb.dev.java.net/nonav/jaxb20-pr/api/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/jaxb-api"   />
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/j2se5.0"  />
      <link href="https://jaxb-architecture-document.dev.java.net/nonav/doc/"
        offline="true" packagelistloc="${basedir}/tools/javadoc-link/jaxb-ri"  />

      <classpath refid="tools.compile.classpath"/>
    </javadoc>
    </target>

  <target name="generate-code" description="Just run the code generators. Designed to be invoked from IDE while developing the RI">
    <ant dir="${basedir}/rt"              target="generate-code" inheritrefs="true"/>
    <ant dir="${basedir}/tools/wscompile" target="generate-code" inheritrefs="true"/>
  </target>



  <target name="runtime-build-mustang" depends="runtime-compile-mustang">
    <!-- Copy resource files etc -->
    <copy todir="${basedir}/rt/build/classes">
      <fileset dir="${basedir}/rt/src">
        <include name="**/*.properties" />
      </fileset>
    </copy>

    <versionProp file="${basedir}/rt/build/classes/com/sun/xml/ws/version.properties" />

    <!-- Copying the manifest -->
    <copy file="${basedir}/rt/etc/manifest" todir="${basedir}/rt/build"/>
    <updateManifestWithVersion file="${basedir}/rt/build/manifest" />

    <jar jarfile="${build.home}/lib/jaxws-rt.jar"
        manifest="${basedir}/rt/build/manifest">
      <fileset dir="${basedir}/rt/build/classes"/>
      <fileset dir="${basedir}/rt-fi/build/classes"/>
      <fileset dir="${basedir}/rt-ha/build/classes"/>
    </jar>
  </target>

  <target name="docs" depends="prepare">
     <ant dir="${basedir}/docs" target="docs"/>
  </target>
    
    <target name="doc-src-zip">
     <ant dir="${basedir}/docs" target="doc-src-zip"/>
    </target>

    <target name="clean" depends="jax-ws.clean">
        <ant dir="${basedir}/transports/local" target="clean"/>
    </target>
<!-- for now, this gets everything built -->
    <target name="image" depends="tools-build">
        <ant dir="transports/local" target="dist" inheritrefs="true"/>
        <!-- should I copy local transport jar to the build.home?  -->

        <copy todir="${build.home}">
            <fileset dir="."
                     includes="ThirdPartyLicense.txt, CDDL+GPLv2.txt, distributionREADME_WMforJava2.0.txt"/>
        </copy>
    </target>

  <target name="dist" depends="image, docs">
    <mkdir dir="${dist.home}"/>
    <mkdir dir="${dist20.home}"/>
    <mkdir dir="${dist20.home}/bin"/>
    <mkdir dir="${dist20.home}/lib"/>
    <mkdir dir="${dist20.home}/docs"/>
    <mkdir dir="${dist20.home}/samples"/>
    <!--
    <copy tofile="${dist20.home}/build.xml" file="${build.home}/../etc/istackonsjsas.xml">
        <filterset begintoken="@@" endtoken="@@">
          <filter token="SPEC_VERSION"
                  value="${release.spec.version}" />
          <filter token="IMPL_VERSION"
                  value="${release.impl.version}"/>
          <filter token="IMPL_VERSION_SUFFIX"
                  value="${release.impl.version.suffix}"/>
        </filterset>
    </copy>
    -->
      <copy tofile="${dist20.home}/build.xml" file="${build.home}/../etc/istackontomcat.xml">
          <filterset begintoken="@@" endtoken="@@">
            <filter token="SPEC_VERSION"
                    value="${release.spec.version}" />
            <filter token="IMPL_VERSION"
                    value="${release.impl.version}"/>
            <filter token="IMPL_VERSION_SUFFIX"
                    value="${release.impl.version.suffix}"/>
          </filterset>
      </copy>

    <copy    todir="${dist20.home}/bin">
      <fileset dir="${build.home}/bin"
          includes="wsimport.*, wsgen.*"/>
    </copy>

    <chmod perm="+x" file="${dist20.home}/bin/wsimport.sh"/>
    <chmod perm="+x" file="${dist20.home}/bin/wsgen.sh"/>

    <copy    todir="${dist20.home}/lib">
      <fileset dir="${build.home}/lib" includes="*.jar"/>
    </copy>
    	
    <copy    todir="${dist20.home}/docs">
      <fileset dir="${build.home}/docs"/>
    </copy>

    <copy    todir="${dist20.home}/samples">
      <fileset dir="samples" includes="**/common_resources/**"/>
      <fileset dir="samples" includes="**/certs/**" excludes="**/CVS/**"/>  
    </copy>

     <copy todir="${dist20.home}/samples">
        <fileset dir="samples" includes="**" excludes="**/certs/**, **/common_resources/**,**/CVS/**" />
        <filterset begintoken="@@" endtoken="@@">
          <filter token="SPEC_VERSION" 
                  value="${release.spec.version}" />
          <filter token="IMPL_VERSION"
                  value="${release.impl.version}"/>
          <filter token="IMPL_VERSION_SUFFIX"
                  value="${release.impl.version.suffix}"/>
        </filterset>
	</copy>

    <copy todir="${dist20.home}/samples/restful/etc">
        <fileset dir="lib" includes="servlet.jar"/>
    </copy>

     <copy todir="${dist20.home}">
  	<fileset dir="${build.home}" includes="*.txt"/>
    </copy>

    <!-- add a copy of the license and README files to the top level -->
    <copy todir="${dist20.home}">
        <fileset dir="." includes="ThirdPartyLicense.txt, CDDL+GPLv2.txt, distributionREADME_WMforJava2.0.txt, LICENSE.txt" />
    </copy>

    <copy todir="${dist20.home}"
          file="README" />
  </target>
  
  <target name="dist.zip" description="create a stand-alone distribution image of the JAX-WS RI"
          depends="dist">
    <zip file="${build.home}/jaxws-ri.zip">
      <fileset dir="${dist.home}" />
    </zip>
  </target>

  <target name="dist-zip-with-src" depends="src.zip, dist.zip"/>

  <target name="src.zip" description="create source zip bundles of the JAX-WS RI" depends="dist">
    <zip file="${dist20.home}/lib/jaxws-rt.src.zip">
      <!-- exclude properties files to avoid duplicates as they are copied to build/classes already-->
      <fileset dir="${basedir}/rt/src" excludes="**/*.properties"/>
      <!-- the following is needed as some properties file are generated dynamically -->
      <fileset dir="${basedir}/rt/build/classes" includes="**/*.properties"/>
      <zipfileset dir="${basedir}/rt/etc/" includes="com.sun.*,javax.xml.ws.*" prefix="META-INF/services"/>  
      <fileset dir="${basedir}/rt-fi/src" />
      <fileset dir="${basedir}/rt-ha/src"/>
      <fileset dir="${basedir}/servlet/src"/>
      <fileset dir="${basedir}/transports/local/src"/>
      <fileset dir="${basedir}/rt/build/gen-src/"/>
    </zip>
    <zip file="${dist20.home}/lib/jaxws-tools.src.zip">
      <!-- exclude properties files to avoid duplicates as they are copied to build/classes already-->
      <fileset dir="${basedir}/tools/wscompile/src" excludes="**/*.properties"/>
      <fileset dir="${basedir}/tools/wscompile/build/gen-src/"/>
      <!-- the following is needed as some properties file are generated dynamically -->
      <fileset dir="${basedir}/tools/wscompile/build/classes" includes="**/*.properties"/>
      <zipfileset dir="${basedir}/tools/etc/" includes="com.sun.*" prefix="META-INF/services"/>
    </zip>
    <zip file="${dist20.home}/lib/jaxws-libs.src.zip">
      <fileset dir="${basedir}/lib" includes="*src.zip" excludes="jaxws-asm-src.zip,junit-src.zip,htmlmacro.src.zip"/>
    </zip>
  </target>

    <target name="jdk-jaxws-src.zip" description="create source zip bundles of the JAX-WS in JDK" depends="src.zip">
        <delete file="${dist20.home}/lib/jaxws-libs.src.zip"/> <!-- not needed as we create another bundle with all libs -->
        <zip file="${dist.home}/jdk-jaxws-libs.src.zip">
            <fileset dir="${dist20.home}/lib" includes="jaxws-rt.src.zip"/>
            <fileset dir="${dist20.home}/lib" includes="jaxws-tools.src.zip"/>
            <fileset dir="${basedir}/lib" includes="FastInfoset.src.zip,jaxb-impl.src.zip, jaxb-xjc.src.zip,
                saaj-impl.src.zip, stax-ex-src.zip, streambuffer.src.zip,
                jaxws-api-src.zip, jaxb-api-src.zip, jsr181-api.src.zip, saaj-api-src.zip, jsr250-api.src.zip,
                mimepull-src.zip, jaxws-asm-src.zip, policy-src.zip,gmbal-api-only-src.zip,management-api-src.zip"/>
        </zip>
        <delete file="${dist20.home}/lib/jaxws-rt.src.zip"/>
        <delete file="${dist20.home}/lib/jaxws-tools.src.zip"/>
    </target>

    <target name="hudson" depends="clean, dist.zip, src.zip,javadocs, doc-src-zip" />

    <macrodef name="prepare-pom">
        <attribute name="module"/>
        <sequential>
            <fail unless="jar.suffix">jar.suffix property needs to be defined</fail>
            <copy file="etc/poms/@{module}.pom" tofile="build/maven2-repo/@{module}.pom" overwrite="true">
                <filterset>
                    <filter token="API_VERSION" value="${release.maven.api.version}"/>
                    <filter token="JAXB_VERSION" value="${jaxb.impl.version}"/>
                    <filter token="JAXB_API_VERSION" value="${jaxb.api.version}"/>
                    <filter token="VERSION" value="${jar.suffix}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="install-local-m2">
            <attribute name="module"/>
            <attribute name="module-src"/>
            <sequential>
                <prepare-pom module="@{module}"/>
                <artifact:install file="${dist20.home}/lib/@{module}.jar">
                    <localRepository path="build/maven2-repo/test"/>
                    <pom file="build/maven2-repo/@{module}.pom"/>
                    <attach file="@{module-src}" classifier="sources" />
                </artifact:install>
            </sequential>
    </macrodef>

    <macrodef name="install-local-m2-zip">
            <attribute name="module"/>
            <sequential>
                <prepare-pom module="@{module}"/>
                <artifact:install file="${build.home}/@{module}.zip">
                    <localRepository path="build/maven2-repo/test"/>
                    <pom file="build/maven2-repo/@{module}.pom"/>
                </artifact:install>
            </sequential>
    </macrodef>

    <macrodef name="push-to-m2">
        <attribute name="module"/>
        <attribute name="module-src"/>
        <sequential>
            <prepare-pom module="@{module}"/>
            <artifact:deploy file="${dist20.home}/lib/@{module}.jar" uniqueVersion="false">
                <remoteRepository url="${java.net.maven2.repo.push.url}">
                  <!-- authentication username="xxx" password="xxx"/-->
                </remoteRepository>
                <localRepository path="build/maven2-repo/test"/>
                <pom file="build/maven2-repo/@{module}.pom"/>
                <attach file="@{module-src}" classifier="sources" />
            </artifact:deploy>
        </sequential>
    </macrodef>

    <macrodef name="push-to-m2-zip">
            <attribute name="module"/>
            <sequential>
                <prepare-pom module="@{module}"/>
                <artifact:deploy file="${build.home}/@{module}.zip" uniqueVersion="false">
                    <remoteRepository url="${java.net.maven2.repo.push.url}"/>
                    <localRepository path="build/maven2-repo/test"/>
                    <pom file="build/maven2-repo/@{module}.pom"/>
                </artifact:deploy>
            </sequential>
        </macrodef>

    <!--
    <target name="install-jaxws-deps-locally" depends="mavenize">
        <delete dir="build/maven2-repo"/>
        <mkdir dir="build/maven2-repo"/>
        <install-local-m2 module="jsr181-api" module-src="lib/jsr181-api.src.zip"/>
        <install-local-m2 module="jsr250-api" module-src="lib/jsr250-api.src.zip"/>
        <install-local-m2 module="resolver" module-src="lib/resolver-src.zip"/>
    </target>

    <target name="push-jaxws-deps-to-m2" depends="mavenize">
        <delete dir="build/maven2-repo"/>
        <mkdir dir="build/maven2-repo"/>
        <push-to-m2 module="jsr181-api" module-src="lib/jsr181-api.src.zip"/>
        <push-to-m2 module="jsr250-api" module-src="lib/jsr250-api.src.zip"/>
        <push-to-m2 module="resolver" module-src="lib/resolver-src.zip"/>
    </target>
    -->

    <target name="push-to-maven2" depends="mavenize">
        <delete dir="build/maven2-repo"/>
        <mkdir dir="build/maven2-repo"/>
        <!--property name="jar.suffix" value="${release.impl.version}"/-->
        <!--property  name="release.maven.api.version" value="${release.api.version}"/-->                
        <antcall target="push-api-to-maven2"/>
        <push-to-m2 module="jaxws-rt" module-src="${dist20.home}/lib/jaxws-rt.src.zip"/>
        <push-to-m2 module="jaxws-tools" module-src="${dist20.home}/lib/jaxws-tools.src.zip"/>
        <push-to-m2-zip module="jaxws-ri"/>
    </target>

    <target  name="push-api-to-maven2" if="push.api.set" depends="mavenize">
        <push-to-m2 module="jaxws-api" module-src="lib/jaxws-api-src.zip"/>
    </target>

    <target name="push-snapshot-to-maven2" depends="dist-zip-with-src"
            description="publish snapshot jars into the maven repository">
        <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT"/>
        <property name="release.maven.api.version" value="${release.api.version}-SNAPSHOT"/>
        <property name="push.api.set" value="true"/>
        <antcall target="push-to-maven2"/>
    </target>

    <target  name="push-promoted-to-maven2" depends="dist-zip-with-src">
        <property  name="jar.suffix" value="${release.impl.version}-promoted-b${promoted.version}"/>
        <property  name="release.maven.api.version" value="${release.api.version}-promoted-b${promoted.version}"/>
        <property name="push.api.set" value="true"/>
        <antcall target="push-to-maven2"/>
        <propertyfile file="project.properties">
            <entry key="promoted.version" type="int" operation="+" value="1" pattern="00"/>
        </propertyfile>
        <exec executable="svn">
            <arg value="commit"/>
            <arg  value="-m"/>
            <arg  value="Updating promoted.version"/>
            <arg  value="project.properties"/>
        </exec>

    </target>

    <target name="install-locally" depends="mavenize,dist-zip-with-src">
        <delete dir="build/maven2-repo"/>
        <mkdir dir="build/maven2-repo"/>
        <!--property name="jar.suffix" value="${release.impl.version}"/-->
        <!--property  name="release.maven.api.version" value="${release.api.version}"/-->

        <install-local-m2 module="jaxws-api" module-src="lib/jaxws-api-src.zip"/>
        <install-local-m2 module="jaxws-rt" module-src="${dist20.home}/lib/jaxws-rt.src.zip"/>
        <install-local-m2 module="jaxws-tools" module-src="${dist20.home}/lib/jaxws-tools.src.zip"/>
        <install-local-m2-zip module="jaxws-ri"/>
    </target>

    <target name="install-snapshot-locally">
            <delete dir="build/maven2-repo"/>
            <mkdir dir="build/maven2-repo"/>
            <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT"/>
            <property name="release.maven.api.version" value="${release.api.version}-SNAPSHOT"/>
            <antcall target="install-locally"/>
    </target>

    <target  name="install-promoted-locally">
            <property  name="jar.suffix" value="${release.impl.version}-promoted-b${promoted.version}"/>
            <property  name="release.maven.api.version" value="${release.api.version}-promoted-b${promoted.version}"/>
            <antcall target="install-locally"/>
    </target>

    <target name="push-to-maven-prepare"
    description="prepare a repository image for the push-to-maven target">
    <taskdef resource="maven-repository-importer.properties">
      <classpath>
        <pathelement path="tools/lib/maven-repository-importer.jar" />
      </classpath>
    </taskdef>
    <delete dir="build/maven-repo" /><!-- clean it -->
    <!-- ${suffix} can be overridden to "" for posting releases -->
    <!-- ${suffix} can be overridden to "" for posting releases -->
      <!--
        when building jars for Maven, we want to put suffix
        (sometimes with version like '-2.0.beta1', with date '-20051208', or with '-SNAPSHOT')
        this property lets you do that.
      -->
    <fail unless="jar.suffix">jar.suffix property needs to be defined</fail>
    <maven-repository-importer
        destdir="build/maven-repo" version="${jar.suffix}">
      <!-- only push API at certain key points, and do so with new version number -->
      <!--
        <artifact
        jar="${dist20.home}/lib/jaxws-api.jar"
        pom="etc/poms/jaxws-api.pom"
        srczip="lib/jaxws-api-src.zip" />
        -->
      <artifact
        jar="${dist20.home}/lib/jaxws-rt.jar"
        pom="etc/poms/jaxws-rt.pom"
        srczip="${dist20.home}/lib/jaxws-rt.src.zip" />
      <artifact
        jar="${dist20.home}/lib/jaxws-tools.jar"
        pom="etc/poms/jaxws-tools.pom"
        srczip="${dist20.home}/lib/jaxws-tools.src.zip" />
      <artifact
                jar="${build.home}/jaxws-ri.zip"
                pom="etc/poms/jaxws-ri.pom"/>

      <!--
        Don't push unless there is some change in 181 api, moreover this is not snapshot for it to be pushed daily.
        <artifact
        jar="lib/jsr181-api.jar"
        pom="etc/poms/jsr181.pom"
        srczip="lib/jsr181-api.src.zip" />
        -->
      <filterset>
        <filter token="API_VERSION" value="${release.maven.api.version}"/>
        <filter token="JAXB_VERSION" value="${jaxb.impl.version}"/>
        <filter token="JAXB_API_VERSION" value="${jaxb.api.version}"/>  
      </filterset>
    </maven-repository-importer>
  </target>

   <target name="replace-binaries-with-re-build">
      <!--
        this target replaces the dist jars with RE BUILD.
        Here JAXWS_RE_BUILD points to the url of jax-ws binaries where jax-ws jars can be found.
      -->
      <get src="${JAXWS_RE_BUILD}/jaxws-rt.jar" dest="${dist20.home}/lib/jaxws-rt.jar"/>
      <get src="${JAXWS_RE_BUILD}/jaxws-tools.jar" dest="${dist20.home}/lib/jaxws-tools.jar"/>
      <get src="${JAXWS_RE_BUILD}/jsr181-api.jar" dest="${dist20.home}/lib/jsr181-api.jar"/>
  </target>
  <!--
  <target name="push-to-maven1" depends="dist-zip-with-src, replace-binaries-with-re-build"
    description="publish artifacts into the maven repository">
    <property name="jar.suffix" value="${release.impl.version}" />
    <property name="release.api.version" value="${release.spec.version}" />

    <antcall target="push-to-maven-prepare"/>
    <echo>importing to CVS...</echo>
    <cvs-import src="build/maven-repo" dest="jax-ws-sources/repo" cvsroot=":pserver:${user.name}@java-net-cvs:/cvs" />
  </target>

  <target name="push-snapshot-to-maven1" depends="dist-zip-with-src"
      description="publish snapshot jars into the maven repository">
      <property name="jar.suffix" value="${release.impl.version}-SNAPSHOT" />
      <property name="release.api.version" value="${release.spec.version}-SNAPSHOT" />
      <antcall target="push-to-maven-prepare"/>
      <echo>importing to CVS...</echo>
      <cvs-import src="build/maven-repo" dest="jax-ws-sources/repo" cvsroot=":pserver;proxy=www-proxy.us.oracle.com;proxyport=80:ramapulavarthi@cvs.dev.java.net:/cvs" />
  </target>

    <target  name="push-snapshot-to-maven" depends="push-snapshot-to-maven1, push-snapshot-to-maven2"/>
    -->

    <target name="integrate-jaxb-hudson" depends="prepare"
            description="integrate the last successful JAXB Hudson build">
        <loadresource property="last.sucessful.jaxb.build">
          <url url="http://sysifos-sol.czech.sun.com/hudson/job/jaxb-ri-2.2/lastSuccessfulBuild/buildNumber"/>
        </loadresource>
      <echo message="Integrating jaxb artifacts from http://sysifos-sol.czech.sun.com/hudson/job/jaxb-ri-2.2/${last.sucessful.jaxb.build}"/>
      <get src="http://sysifos-sol.czech.sun.com/hudson/job/jaxb-ri-2.2/${last.sucessful.jaxb.build}/artifact/jaxb-ri.zip"
           dest="${build.home}/jaxb-ri.zip" />
      <mkdir dir="${build.home}/jaxb" />
      <unzip src="${build.home}/jaxb-ri.zip" dest="${build.home}/jaxb"/>
      <copy todir="lib" overwrite="true">
        <fileset dir="${build.home}/jaxb/jaxb-ri/lib" includes="*.zip,*.jar"
                 excludes="activation.jar, jsr173_1.0_api.jar, jaxb1-impl*" />
      </copy>
      <get src="http://sysifos-sol.czech.sun.com/hudson/job/jaxb-ri-2.2/${last.sucessful.jaxb.build}/artifact/osgi/build/jaxb-osgi.jar"
           dest="${v3-osgi.dir}/jaxb-osgi.jar" />
      <get src="http://sysifos-sol.czech.sun.com/hudson/job/jaxb-ri-2.2/${last.sucessful.jaxb.build}/artifact/osgi/build/jaxb-api-osgi.jar"
           dest="${v3-osgi.dir}/jaxb-api-osgi.jar" />
      <get src="http://sysifos-sol.czech.sun.com/hudson/job/jaxb-ri-2.2/${last.sucessful.jaxb.build}/artifact/osgi/build/jaxb-api-osgi-sources.jar"
           dest="${v3-osgi.dir}/jaxb-api-osgi-sources.jar" />
  <!--<delete dir="${build.home}/jaxb" /> -->
    </target>

    <!-- Integrates 181 -->
    <target name="integrate-181-hudson" depends="prepare"
            description="integrate the last successful 181 Hudson build">
      <get src="http://hudson-sca.us.oracle.com/job/jsr181/lastSuccessfulBuild/artifact/build/lib/jsr181-api.jar" dest="lib/jsr181-api.jar"/>
      <get src="http://hudson-sca.us.oracle.com/job/jsr181/lastSuccessfulBuild/artifact/build/lib/jsr181-api.src.zip" dest="lib/jsr181-api.src.zip"/>
    </target>

    <target name="integrate-policy-hudson"
            description="integrate the last successful policy-core Hudson build">

        <get src="http://hudson-sca.us.oracle.com/job/policy-core/lastSuccessfulBuild/artifact/target/policy.jar"
             dest="lib/policy.jar"/>
        <get src="http://hudson-sca.us.oracle.com/job/policy-core/lastSuccessfulBuild/artifact/target/policy-src.zip"
             dest="lib/policy-src.zip"/>

    </target>

    <target name="integrate-policy-maven"
            description="integrate the last successful policy-core maven">
         <get src="http://download.java.net/maven/2/com/sun/xml/ws/policy/${policy.version}/policy-${policy.version}.jar"
             dest="lib/policy.jar" />
         <get src="http://download.java.net/maven/2/com/sun/xml/ws/policy/${policy.version}/policy-${policy.version}-sources.jar"
             dest="lib/policy-src.zip" />
    </target>

    <target name="integrate-ha-api-maven" description="integrate the latest GF HA API">
        <get src="http://download.java.net/maven/glassfish/org/glassfish/ha/ha-api/${ha-api.version}/ha-api-${ha-api.version}.jar"
             dest="rt-ha/lib/ha-api.jar" />
        <get src="http://download.java.net/maven/glassfish/org/glassfish/ha/ha-api/${ha-api.version}/ha-api-${ha-api.version}-sources.jar"
             dest="rt-ha/lib/ha-api.src.zip" />
    </target>


    <property name="maven.ant.task.jar" value="maven-ant-tasks-2.0.10.jar"/>
    <property name="java.net.maven2.repo" value="http://download.java.net/maven/2"/>
    <property name="java.net.maven2.repo.push.url" value="java-net:/maven2-repository~svn/trunk/repository/"/>
    <!--property name="java.net.maven2.repo.push.url" value="svn:https://svn.java.net/svn/maven2-repository~svn/trunk/repository"/-->
    <!--property name="java.net.maven2.repo.push.url" value="dav:http://glassfish-maven-repository.us.oracle.com/maven/repositories/glassfish/"/-->

    <target name="check-maven-ant-task">
        <available property="maven.ant.task.available" value="true" file="${lib.home}/${maven.ant.task.jar}"
                   type="file"/>
    </target>

    <target name="setproxy">
        <property  name="proxy.host" value="www-proxy.us.oracle.com"/>
        <property name="proxy.port" value="80"/>

      <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
    </target>

    <target name="init-maven-ant" depends="check-maven-ant-task,setproxy" unless="maven.ant.task.available">
        <echo message="Fetching Maven ant task..."/>
        <get src="http://archive.apache.org/dist/maven/binaries/${maven.ant.task.jar}"
             dest="${lib.home}/${maven.ant.task.jar}" verbose="true"/>
    </target>

    <target name="mavenize" depends="init-maven-ant">
        <path id="maven-ant-tasks.classpath" path="${lib.home}/${maven.ant.task.jar}"/>
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
                 classpathref="maven-ant-tasks.classpath"/>
        <mkdir dir="build/maven2-repo/test"/>
        <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.12">
            <artifact:remoteRepository url="${java.net.maven2.repo}"></artifact:remoteRepository>        
        </artifact:install-provider>
        <artifact:install-provider artifactId="wagon-webdav" groupId="org.apache.maven.wagon" version="1.0-beta-2">
        </artifact:install-provider>
        <!--
        <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.11-SNAPSHOT">
            <artifact:remoteRepository url="${java.net.maven2.repo}"></artifact:remoteRepository>        
        </artifact:install-provider>
        -->


    </target>

    <target name="warn-gmbal-version-param" unless="gmbal.version">
        <echo message="gmbal.version propery must be specified for running integrate-gmbal target"/>
    </target>

    <target name="integrate-gmbal" depends="mavenize, warn-gmbal-version-param" if="gmbal.version">
        <artifact:dependencies filesetId="dependency.fileset"
                               sourcesFilesetId="sources.dependency.fileset"
                               versionsId="dependency.versions" useScope="runtime" addArtifactFileSetRefs="true">
            <dependency groupId="org.glassfish.gmbal" artifactId="gmbal-api-only" version="${gmbal.version}"/>
            <remoteRepository url="${java.net.maven2.repo}"/>
        </artifact:dependencies>

        <copy todir="${lib.home}">
            <fileset refid="dependency.fileset"/>
            <mapper classpathref="maven-ant-tasks.classpath"
                    classname="org.apache.maven.artifact.ant.VersionMapper"
                    from="${dependency.versions}" to="flatten"/>
        </copy>
        <copy todir="${lib.home}">
            <fileset refid="sources.dependency.fileset"/>
            <mapper classpathref="maven-ant-tasks.classpath"
                    classname="org.apache.maven.artifact.ant.VersionMapper"
                    from="${dependency.versions}" to="flatten"/>
        </copy>
        
        <!-- Ugly Workaround for Gmbal source bundle inconsistency -->
                <!--
                <echo message="${org.glassfish.external:management-api:jar}"/>
                <echo message="${dependency.versions}"/>
                -->

        <get src="${java.net.maven2.repo}/org/glassfish/gmbal/gmbal-api-only-source/${gmbal.version}/gmbal-api-only-source-${gmbal.version}.jar"
             dest="${lib.home}/gmbal-api-only-src.jar" verbose="true"/>
        <zip destfile="${lib.home}/gmbal-api-only-src.zip">
                    <zipfileset src="${lib.home}/gmbal-api-only-src.jar"/>
                </zip>
                <delete file="${lib.home}/gmbal-api-only-src.jar"/>

        <!-- Now get the management-api version from the gmbal-api pom -->
        <pathconvert pathsep="," property="management-api.version">
            <path location="${dependency.versions}"/>
            <chainedmapper>
                <flattenmapper/>
                <mapper type="regexp" from="^(.*):(.*)$$" to="\2"/>
            </chainedmapper>
        </pathconvert>

        <get src="${java.net.maven2.repo}/org/glassfish/external/management-api-sources/${management-api.version}/management-api-sources-${management-api.version}.jar"
                     dest="${lib.home}/management-api-src.jar" verbose="true"/>
        <zip destfile="${lib.home}/management-api-src.zip">
            <zipfileset src="${lib.home}/management-api-src.jar"/>
        </zip>
        <delete file="${lib.home}/management-api-src.jar"/>

    </target>

    <target name="integrate-maven-repository-importer">
    <get src="http://hudson-sca.us.oracle.com/job/maven-repository-importer/lastSuccessfulBuild/artifact/build/maven-repository-importer.jar"
         dest="tools/lib/maven-repository-importer.jar" />
  </target>

  <target name="integrate-saaj-maven" depends="prepare" description="integrate saaj from maven">
    <get src="http://download.java.net/maven/2/com/sun/xml/messaging/saaj/saaj-impl/${saaj-impl.version}/saaj-impl-${saaj-impl.version}.jar"
             dest="lib/saaj-impl.jar" />
    <get src="http://download.java.net/maven/2/com/sun/xml/messaging/saaj/saaj-impl/${saaj-impl.version}/saaj-impl-${saaj-impl.version}-sources.jar"
             dest="lib/saaj-impl.src.zip" />
  </target>

  <target name="integrate-saaj-api-maven" depends="prepare" description="integrate saaj api from maven">
    <get src="http://download.java.net/maven/2/javax/xml/soap/saaj-api/${saaj-api.version}/saaj-api-${saaj-api.version}.jar"
             dest="lib/saaj-api.jar" />
    <get src="http://download.java.net/maven/2/javax/xml/soap/saaj-api/${saaj-api.version}/saaj-api-${saaj-api.version}-sources.jar"
             dest="lib/saaj-api-src.zip" />
  </target>

    <target name="integrate-saaj-hudson" depends="prepare"
            description="integrate the last successful SAAJ RI Hudson build">
        <get src="http://hudson-sca.us.oracle.com/job/saaj-ri-1.3.4/lastSuccessfulBuild/artifact/build/lib/saaj-impl.jar"
             dest="lib/saaj-impl.jar"/>
        <get src="http://hudson-sca.us.oracle.com/job/saaj-ri-1.3.4/lastSuccessfulBuild/artifact/zip-dist/saaj1.3.4.src.zip"                  
             dest="lib/saaj-impl.src.zip"/>
        <get src="http://hudson-sca.us.oracle.com/job/saaj-ri-1.3.4/lastSuccessfulBuild/artifact/build/lib/saaj-api.jar"
             dest="lib/saaj-api.jar"/>
        <get src="http://hudson-sca.us.oracle.com/job/saaj-ri-1.3.4/lastSuccessfulBuild/artifact/zip-dist/saaj-api-src.zip"
             dest="lib/saaj-api-src.zip"/>
    </target>

    <target name="integrate-xmlstreambuffer-hudson" depends="prepare"
            description="integrate the last successful XmlStreamBuffer Hudson build">
    <get src="http://hudson-sca.us.oracle.com/job/xmlstreambuffer/lastSuccessfulBuild/artifact/xmlstreambuffer/package/streambuffer.src.zip"
         dest="lib/streambuffer.src.zip" />
    <get src="http://hudson-sca.us.oracle.com/job/xmlstreambuffer/lastSuccessfulBuild/artifact/xmlstreambuffer/streambuffer/dist/streambuffer.jar"
         dest="lib/streambuffer.jar" />
  </target>

  <target name="integrate-xmlstreambuffer-maven" depends="prepare" description="integrate xmlstreambuffer from maven">
    <get src="http://download.java.net/maven/2/com/sun/xml/stream/buffer/streambuffer/${xmlstreambuffer.version}/streambuffer-${xmlstreambuffer.version}.jar"
             dest="lib/streambuffer.jar" />
    <get src="http://download.java.net/maven/2/com/sun/xml/stream/buffer/streambuffer/${xmlstreambuffer.version}/streambuffer-${xmlstreambuffer.version}-sources.jar"
             dest="lib/streambuffer.src.zip" />
  </target>

  <target name="integrate-stax-ex-maven" depends="prepare" description="integrate stax-ex from maven">
    <get src="http://download.java.net/maven/2/org/jvnet/staxex/stax-ex/${stax-ex.version}/stax-ex-${stax-ex.version}.jar"
             dest="lib/stax-ex.jar" />
    <get src="http://download.java.net/maven/2/org/jvnet/staxex/stax-ex/${stax-ex.version}/stax-ex-${stax-ex.version}-sources.jar"
             dest="lib/stax-ex-src.zip" />
  </target>
  
  <target name="integrate-stax-ex-hudson" depends="prepare"
          description="integrate the last successful stax-ex Hudson build">
    <get src="http://hudson-sca.us.oracle.com/job/stax-ex/lastSuccessfulBuild/artifact/stax-ex/stax-ex/target/stax-ex.jar"
         dest="lib/stax-ex.jar" />
    <get src="http://hudson-sca.us.oracle.com/job/stax-ex/lastSuccessfulBuild/artifact/stax-ex/stax-ex/target/stax-ex-src.zip"
         dest="lib/stax-ex-src.zip" />
  </target>

  <target name="integrate-jsr250-maven" depends="prepare" description="integrate jsr250 from maven">
    <get src="http://download.java.net/maven/glassfish/org/glassfish/javax.annotation/${jsr250.version}/javax.annotation-${jsr250.version}.jar"
             dest="lib/jsr250-api.jar" />
    <get src="http://download.java.net/maven/glassfish/org/glassfish/javax.annotation/${jsr250.version}/javax.annotation-${jsr250.version}-sources.jar"
             dest="lib/jsr250-api.src.zip" />
  </target>

  <target name="integrate-mimepull-maven" depends="prepare" description="integrate mimepull from maven">
    <get src="http://download.java.net/maven/2/org/jvnet/mimepull/${mimepull.version}/mimepull-${mimepull.version}.jar"
             dest="lib/mimepull.jar" />
    <get src="http://download.java.net/maven/2/org/jvnet/mimepull/${mimepull.version}/mimepull-${mimepull.version}-sources.jar"
             dest="lib/mimepull-src.zip" />
  </target>

  <target name="integrate-mimepull" depends="prepare"
          description="integrate the last successful mimepull Hudson build">
    <get src="http://hudson-sca.us.oracle.com/job/mimepull/org.jvnet$mimepull/lastSuccessfulBuild/artifact/org.jvnet/mimepull/1.3-SNAPSHOT/mimepull-1.3-SNAPSHOT.jar"
         dest="lib/mimepull.jar" />
    <get src="http://hudson-sca.us.oracle.com/job/mimepull/org.jvnet$mimepull/lastSuccessfulBuild/artifact/org.jvnet/mimepull/1.3-SNAPSHOT/mimepull-1.3-SNAPSHOT-sources.jar"
         dest="lib/mimepull-src.zip" />
  </target>

    <target name="integrate-wom" depends="prepare"
            description="integrate the last successful wom Hudson build">
      <get src="http://hudson-sca.us.oracle.com/job/wom/org.jvnet$wom/lastSuccessfulBuild/artifact/org.jvnet/wom/1.0-SNAPSHOT/wom-1.0-SNAPSHOT.jar"
           dest="lib/wom.jar" />
      <get src="http://hudson-sca.us.oracle.com/job/wom/org.jvnet$wom/lastSuccessfulBuild/artifact/org.jvnet/wom/1.0-SNAPSHOT/wom-1.0-SNAPSHOT-sources.jar"
           dest="lib/wom-src.zip" />
    </target>

  <target name="integrate-sjsxp-hudson" depends="prepare"
          description="integrate the last successful sjsxp Hudson build">
    <get src="http://hudson-sca.us.oracle.com/job/zephyr/lastSuccessfulBuild/artifact/dist/sjsxp-1_0_2/sjsxp.jar"
         dest="lib/sjsxp.jar" />
    <get src="http://hudson-sca.us.oracle.com/job/zephyr/lastSuccessfulBuild/artifact/dist/sjsxp-src-1_0_2.zip"
         dest="lib/sjsxp-src.zip" />
  </target>

  <target name="integrate-jaxws22-api-hudson" depends="prepare"
          description="integrate the last successful jaxws 2.2 API from Hudson build">
    <get src="http://hudson-sca.us.oracle.com/job/jsr224-2.2/lastSuccessfulBuild/artifact/jsr224/api/build/lib/jaxws-api.jar"
         dest="lib/jaxws-api.jar" />
    <get src="http://hudson-sca.us.oracle.com/job/jsr224-2.2/lastSuccessfulBuild/artifact/jsr224/api/build/lib/jaxws-api-src.zip"
         dest="lib/jaxws-api-src.zip" />
  </target>

  <target name="integrate-FastInfoset-maven" depends="prepare"
              description="integrate the last successful FastInfoset 1.2 Hudson build">
          <get src="${jn.m2}/com/sun/xml/fastinfoset/FastInfoset/${fi.version}/FastInfoset-${fi.version}.jar"
                 dest="lib/FastInfoset.jar" />
          <get src="${jn.m2}/com/sun/xml/fastinfoset/FastInfoset/${fi.version}/FastInfoset-${fi.version}-sources.jar"
                 dest="lib/FastInfoset.src.zip" />
  </target>

  <target name="integrate-FastInfoset-hudson" depends="prepare"
          description="integrate the last successful FastInfoset 1.2 Hudson build">
      <echo  message="Use target:integrate-FastInfoset-maven"/>
     <!--
      <get src="http://hudson-sca.us.oracle.com/job/fi-1.2/lastSuccessfulBuild/artifact/code/fastinfoset/target/FastInfoset-${fi.version}.jar"
         dest="lib/FastInfoset.jar" />
    <get src="http://hudson-sca.us.oracle.com/job/fi-1.2/lastSuccessfulBuild/artifact/code/fastinfoset/target/FastInfoset-${fi.version}-sources.jar"
         dest="lib/FastInfoset.src.zip" />
         -->
  </target>

    <target name="integrate-htmlmacro-hudson" depends="prepare"
             description="integrate the last successful htmlmacro Hudson build">
       <get src="http://hudson-sca.us.oracle.com/job/htmlmacro/lastSuccessfulBuild/artifact/htmlmacro/build/htmlmacro.zip"
            dest="${lib.home}/htmlmacro.zip" />
       <mkdir dir="${lib.home}/htmlmacro" />
       <unzip src="${lib.home}/htmlmacro.zip" dest="${lib.home}/htmlmacro"/>
       <copy todir="lib" overwrite="true">
         <fileset dir="${lib.home}/htmlmacro/" includes="*.zip,*.jar"/>
       </copy>
        <delete dir="${lib.home}/htmlmacro" />
        <delete file="${lib.home}/htmlmacro.zip"/>
     </target>

    <!--
    <taskdef name="installerBuilder"
        classname="com.sun.tools.xjc.installer.builder.BuilderTask">
      <classpath>
        <fileset dir="${basedir}/tools/lib" includes="installer-builder.jar, sfx4j-1.0.jar"/>
      </classpath>
    </taskdef>
    -->
    
    <target name="re-build"
        description="RE build target">
      <antcall target="generate-binary">
        <param name="compile.debug" value="true"/>
      </antcall>
      <antcall target="generate-weekly-source">
        <param name="compile.debug" value="true"/>
      </antcall>
      <antcall target="generate-bundle-for-licensee" />
      <!--
        This is no longer needed as we dont need to create a click thru license jar
        <move tofile="${build.home}/jaxws-${release.jar.version}.jar"
         file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_${DSTAMP}.jar"/>
      <move tofile="${build.home}/jaxws-${release.jar.version}-src.jar"
         file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.jar"/>
      -->
      <copy tofile="${build.home}/jaxws-${release.jar.version}.zip"
         file="${build.home}/jaxws-ri.zip"/>
      <move tofile="${build.home}/jaxws-${release.jar.version}-src.zip"
         file="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.zip"/>
    </target>

    <target name="generate-binary"
        description="generate java.net binary distribution">
      <antcall target="dist.zip">
        <param name="compile.debug" value="true"/>
      </antcall>
      <tstamp/>
      <!-- generate the class -->
      <!--
        This is no longer needed as we dont need to create a click thru license jar

        <installerBuilder classFile="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_${DSTAMP}.jar"
          licenseFile="${basedir}/CDDL+GPLv2.txt"
          zipFile="${build.home}/jaxws-ri.zip" />
      -->
    </target>
    
    <target name="generate-weekly-binary"
        description="generate java.net binary distribution">
      <antcall target="generate-binary">
        <param name="compile.debug" value="true"/>
      </antcall>
      <delete file="${build.home}/jaxws-ri.zip" />
    </target>


    <patternset id="src-includes"
                description="This pattern set defines which files will be in/excluded in the src bundle">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
    </patternset>

    <target name="generate-weekly-source"
        depends="dist"
        description="generate sources for java.net binary distribution">
      <tstamp/>
            
      <!-- create the zip file contents -->
      <property name="source.drop.dir" value="${build.home}/source-bundle"/>
      <property name="source.dist.dir.name" value="jaxws-ri-${DSTAMP}"/>
      <property name="src.installer.tmp" value="${build.home}/src-tmp" />
      <delete dir="${source.drop.dir}"/>
      <mkdir dir="${source.drop.dir}"/>
      <mkdir dir="${source.drop.dir}/jaxws-ri/lib"/>

        <zip destfile="${source.drop.dir}/jaxws-src.zip" duplicate="fail" whenempty="fail">
            <zipfileset dir="rt/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt-fi/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt-ha/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="rt/build/gen-src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>

            <zipfileset dir="tools/wscompile/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="tools/wscompile/build/gen-src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <zipfileset dir="servlet/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            <!--
            <zipfileset dir="transports/local/src" prefix="${source.dist.dir.name}/src" defaultexcludes="true">
                <patternset refid="src-includes"/>
            </zipfileset>
            -->
            <zipfileset dir="${basedir}/etc" includes="src-bundle.xml"
                        fullpath="${source.dist.dir.name}/build.xml"/>

            <!-- additional jar files -->
            <zipfileset dir="${basedir}/build/lib" includes="*.jar" excludes="ant*.* junit.jar" prefix="${source.dist.dir.name}/lib"/>
            <zipfileset dir="servlet/lib" includes="*.jar" prefix="${source.dist.dir.name}/lib"/>
            <!-- ha-api.jar is already copied to build/lib, so it is part of zip
            <zipfileset dir="rt-ha/lib" includes="*.jar" prefix="${source.dist.dir.name}/lib"/>
            -->

            <!-- license files -->
            <zipfileset dir="." includes="ThirdPartyLicense.txt, CDDL+GPLv2.txt, LICENSE.txt"
                        prefix="${source.dist.dir.name}"/>

        </zip>

        <!-- test the generated source bundle -->
        <delete dir="${src.installer.tmp}" failonerror="false" />
        <mkdir dir="${src.installer.tmp}" />
        <unzip dest="${src.installer.tmp}" src="${source.drop.dir}/jaxws-src.zip"/>
        <ant dir="${src.installer.tmp}/${source.dist.dir.name}" inheritAll="false" inheritRefs="false"/>

        <!-- delete the srctmp dir -->
        <delete dir="${src.installer.tmp}"/>

      <!-- 1.X version opens to a zip file, so wrap our zip
          in another one to send to installer -->
      <zip destfile="${source.drop.dir}/jaxws-src-installer.zip">
        <zipfileset file="${source.drop.dir}/jaxws-src.zip"/>
      </zip>

      <copy file="${source.drop.dir}/jaxws-src.zip" tofile="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.zip"/>  
      <!-- generate the installer -->
      <!--
        This is no longer needed as we dont need to create a click thru license jar
        <installerBuilder classFile="${build.home}/JAXWS${release.impl.version}${release.impl.version.suffix}_source_${DSTAMP}.jar"
          licenseFile="${basedir}/CDDL+GPLv2.txt"
          zipFile="${source.drop.dir}/jaxws-src-installer.zip"/>
          -->
      <delete dir="${source.drop.dir}"/>
    </target>

    <target name="generate-bundle-for-licensee"
            depends="prepare"
            description="generate sources bundle for licensees">
        <tstamp/>

        <get src="http://hudson-sca.us.oracle.com/job/tlda-license/lastSuccessfulBuild/artifact/TLDA_SCSL_Licensees_License_Notice.txt" dest="${build.home}/TLDA_SCSL_Licensees_License_Notice.txt"/>
                  
        <!-- create the zip file contents -->
        <property name="source.drop.dir" value="${build.home}/source-bundle"/>
        <property name="source.dist.dir.name" value="jaxws-ri-${DSTAMP}"/>
        <property name="src.installer.tmp" value="${build.home}/src-tmp"/>
        <delete dir="${source.drop.dir}"/>
        <mkdir dir="${source.drop.dir}"/>
        <mkdir dir="${source.drop.dir}/jaxws-ri/lib"/>

        <zip destfile="${build.home}/jaxws-${release.jar.version}-src-licensee.zip"  duplicate="fail" whenempty="fail">
            <zipfileset dir="rt" prefix="${source.dist.dir.name}/rt" defaultexcludes="true" includes="build.xml, src/**, build/gen-src/**, etc/**" excludes="test/**"/>
            <zipfileset dir="rt-fi" prefix="${source.dist.dir.name}/rt-fi" defaultexcludes="true" includes="build.xml, src/**"/>
            <zipfileset dir="rt-ha" prefix="${source.dist.dir.name}/rt-ha" defaultexcludes="true" includes="build.xml, src/**,lib/**"/>
            <zipfileset dir="tools" prefix="${source.dist.dir.name}/tools" defaultexcludes="true" includes="etc/**, wscompile/build.xml, wscompile/src/**, wscompile/build/gen-src/**, resourcegen/**, bin/**"/>
            <zipfileset dir="servlet" prefix="${source.dist.dir.name}/servlet" defaultexcludes="true" includes="build.xml, src/**, lib/**, etc/**"/>
            <zipfileset dir="httpspi-servlet" prefix="${source.dist.dir.name}/httpspi-servlet" defaultexcludes="true" includes="build.xml, src/**, lib/**"/>
            <zipfileset dir="${basedir}/etc" includes="build-bundle.xml"
                        fullpath="${source.dist.dir.name}/build.xml"/>
            <zipfileset dir="${basedir}/etc" prefix="${source.dist.dir.name}/etc" includes="CDDL+GPLv2.xml" />
            <zipfileset dir="${basedir}/etc" includes="src-build-readme.txt"
                        fullpath="${source.dist.dir.name}/README"/>
            <!-- additional jar files -->
            <zipfileset dir="${basedir}/lib" includes="*.jar" excludes="ant*.*, junit.jar, commons-jelly-tags-jsl-1.0.jar, sjsxp.jar, maven-ant-tasks-2.0.10.jar, javax.mail_1.4.jar, html*.jar"
                        prefix="${source.dist.dir.name}/lib"/>
            <zipfileset dir="${basedir}/lib" includes="*.zip" excludes="ant*.zip, junit-*.zip, commons-jelly-tags-jsl-1.0.zip, sjsxp-*.zip, maven-ant-tasks-2.0.10.zip, *-doc.zip, html*.zip "
                        prefix="${source.dist.dir.name}/lib"/>
          <!--  <zipfileset dir="servlet/lib" includes="*.jar" prefix="${source.dist.dir.name}/lib"/> -->

            <!-- license files -->
            <zipfileset dir="."
                        includes="ThirdPartyLicense.txt, distributionREADME_WMforJava2.0.txt, project.properties, build-j2se.xml"
                        prefix="${source.dist.dir.name}"/>
            <zipfileset dir="${build.home}"
                        includes="TLDA_SCSL_Licensees_License_Notice.txt"
                        prefix="${source.dist.dir.name}"/>
        </zip>        
    </target>

  <!-- =====================
       SVR4 DISTRIBUTION 
       ===================== -->
  <!-- assumes the dist target has been run -->
  <target name="create.pkg" description="Create JAX-WS svr4 package">
    <ant antfile="build-pkg.xml" target="create.pkg" inheritrefs="true"/>
  </target>

  <!-- =====================
       RPM DISTRIBUTION 
       ===================== -->
  <!-- assumes the dist target has been called -->
  <target name="create.rpm" description="Create JAX-WS RPM">
    <ant antfile="build-pkg.xml" target="create.rpm" inheritrefs="true"/>
  </target>

  <!-- =====================
       ZIP FILE DISTRIBUTION 
       ======================= -->
  <!-- assumes the dist target has been called -->
  <target name="create.zip" description="Create JAX-WS ZIP">
    <ant antfile="build-pkg.xml" target="create.zip" inheritrefs="true"/>
  </target>

  <!-- =======================
       HPUX DISTRIBUTION 
       ======================= -->
  <!-- assumes the dist target has been called -->
  <target name="create.hpux" description="Create HPUX pkg for JAX-WS">
    <ant antfile="build-pkg.xml" target="create.hpux" inheritrefs="true"/>
  </target>



    <!-- findbugs -->
     <property name="findbugs.home" value="${basedir}/etc/findbugs/"/>

    <path id="findbugs.class">
        <fileset dir="${findbugs.home}/lib" includes="*.jar"/>
    </path>
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <classpath refid="findbugs.class"/>
    </taskdef>


    <target name="findbugs">
        <findbugs home="${findbugs.home}"
                  output="xml"
                  outputFile="${build.home}/jaxws-findbugs.xml"
                  jvmargs="-Xms64m -Xmx256m">
            <auxclasspath>
                <fileset dir="${build.home}/lib" includes="*.jar" excludes="jaxws-rt.jar, jaxws-tools.jar"/>
                <fileset file="${java.home}/../lib/tools.jar"/>
                <fileset dir="${basedir}/servlet/lib" includes="javax.servlet.jar"/>
                <fileset dir="${basedir}/lib" includes="ant.jar"/>
            </auxclasspath>
            <sourcepath>
                <pathelement location="${basedir}/rt/src"/>
                <pathelement location="${basedir}/tools/wscompile/src"/>
                <pathelement location="${basedir}/servlet/src"/>
                <pathelement location="${basedir}/rt-ha/src"/>
            </sourcepath>
            <class location="${build.home}/lib/jaxws-rt.jar"/>
            <class location="${build.home}/lib/jaxws-tools.jar"/>
        </findbugs>
    </target>


    <target name="findbugs-html" depends="main">
        <findbugs home="${findbugs.home}"
                  output="html"
                  outputFile="${build.home}/jaxws-findbugs.html"
                  jvmargs="-Xms64m -Xmx256m ">
            <auxclasspath>
                <fileset dir="${build.home}/lib" includes="*.jar" excludes="jaxws-rt.jar, jaxws-tools.jar"/>
                <fileset file="${java.home}/../lib/tools.jar"/>
                <fileset dir="${basedir}/servlet/lib" includes="javax.servlet.jar"/>
                <fileset dir="${basedir}/lib" includes="ant.jar"/>
            </auxclasspath>
            <sourcepath>
                <pathelement location="${basedir}/rt/src"/>
                <pathelement location="${basedir}/tools/wscompile/src"/>
                <pathelement location="${basedir}/servlet/src"/>
            </sourcepath>
            <class location="${build.home}/lib/jaxws-rt.jar"/>
            <class location="${build.home}/lib/jaxws-tools.jar"/>
        </findbugs>
    </target>


    <target name="test" description="Run the unit tests in all subprojects">
        <subant target="test" inheritrefs="true">
            <fileset dir="${basedir}">
                <include name="rt/build.xml"/>
                <!-- tools/wscompile has a test target but no tests -->
                <!-- include name="tools/wscompile/build.xml"/      -->
            </fileset>
        </subant>
    </target>

</project>
