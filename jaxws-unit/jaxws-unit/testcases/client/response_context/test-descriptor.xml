<descriptor since="2.1" transport="http">
  <!--
    This test needs real clean up. All those constants are not used at all.
  -->
  <description>
    Testing ResponseContext
  </description>
  <service basedir="./server">
    <wsdl href="hello_literal.wsdl"/>
  </service>
  <client name="client.response-context1"><![CDATA[
    try {
      req = new Hello_Type();
      req.setArgument("foo");
      req.setExtra("bar");

      helloPort.getRequestContext().put(
        BindingProvider.ENDPOINT_ADDRESS_PROPERTY, helloPortAddress.toString());

      response = helloPort.hello(req);
    } catch (Exception e) {
      rc = helloPort.getResponseContext();
      assertNotNull(rc);
      assertNotNull(rc.get(MessageContext.HTTP_RESPONSE_CODE));
      assertEquals(200,rc.get(MessageContext.HTTP_RESPONSE_CODE));
    }
  ]]></client>
  <client name="client.response-context2"><![CDATA[
        assertNull(helloPort.getResponseContext());
  ]]></client>


  <!-- TODO: should be moved out to resources -->
  <pre-client><![CDATA[
    helloSM = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"><soapenv:Body><Hello xmlns=\"urn:test:types\"><argument>foo</argument><extra>Test </extra></Hello></soapenv:Body></soapenv:Envelope>";
    helloResponseSM = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"><soapenv:Body><HelloResponse xmlns=\"urn:test:types\"><argument>foo</argument><extra>Test </extra></HelloResponse></soapenv:Body></soapenv:Envelope>";
    helloMsg = "<Hello xmlns=\"urn:test:types\"><argument>foo</argument><extra>bar</extra></Hello>";
    helloMsgBadFoo = "<Hello xmlns=\"urn:test:types\"><argument>badfoo</argument><extra>bar</extra></Hello>";
    bad3helloMsg = "<Hello xmlns=\"urn:test\"><argument>foo</argument><extra>bar</extra></Hello>";

    badhelloMsg = "<Hello xmlns=\"urn:test:types\">.....<bar></Hello>";
    helloResponse = "<HelloResponse xmlns=\"urn:test:types\"><argument>foo</argument><extra>bar</extra></HelloResponse>";
    helloResponseRequest = "<HelloResponse xmlns=\"urn:test:types\"><argument>foo</argument><extra>bar</extra></HelloResponse>";

    voidMsg = "</VoidTest>";

    //should give RemoteException with jaxbException cause
    badvoidMsg = "<VoidTest xmlns=\"\"urn:test\"/>";
    voidResponse = "<VoidTestResponse xmlns=\"urn:test:types\"/>";

    bugTest2 = "<ns2:GetUserByID1 xmlns:ns2=\"http://example.com/auctiontraq/wsdl/rpclit\" xmlns:ns3=\"http://example.com/auctiontraq/schemas/rpclit\"><Body>rama.pulavarthi@sun.com</Body></ns2:GetUserByID1>";

    bugTest = "<GetUserByID1Response xmlns=\"http://example.com/auctiontraq/wsdl/rpclit\"><Body xmlns=\"\" userRating=\"5\"><ns1:name xmlns:ns1=\"http://example.com/auctiontraq/schemas/rpclit\"><ns1:fname>Rama</ns1:fname><ns1:lname>Pulavarthi</ns1:lname></ns1:name><ns2:dob xmlns:ns2=\"http://example.com/auctiontraq/schemas/rpclit\">1978-08-30-07:00</ns2:dob><ns3:age xmlns:ns3=\"http://example.com/auctiontraq/schemas/rpclit\">25</ns3:age><ns4:ssn xmlns:ns4=\"http://example.com/auctiontraq/schemas/rpclit\">123 456 7890</ns4:ssn><ns5:address xmlns:ns5=\"http://example.com/auctiontraq/schemas/rpclit\"><ns5:street>988 Henderson Ave</ns5:street><ns5:city>Sunnyvale</ns5:city><ns5:state>CA</ns5:state><ns5:country>USA</ns5:country><ns5:zipcode>94086</ns5:zipcode></ns5:address><ns6:email xmlns:ns6=\"http://example.com/auctiontraq/schemas/rpclit\">rama.pulavarthi@sun.com</ns6:email><ns7:password xmlns:ns7=\"http://example.com/auctiontraq/schemas/rpclit\">cGFzc3dvcmQ=</ns7:password><ns8:memberSince xmlns:ns8=\"http://example.com/auctiontraq/schemas/rpclit\">2000-08-24-07:00</ns8:memberSince><ns9:authenticated xmlns:ns9=\"http://example.com/auctiontraq/schemas/rpclit\">true</ns9:authenticated></Body></GetUserByID1Response>";
    sqeTest = "<Person xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://example.com/auctiontraq/schemas/doclit\" xsi:type=\"UserType\" userRating=\"5\"><name><fname>Rama</fname><lname>Pulavarthi</lname></name><ssn>123</ssn><ssn>456</ssn><ssn>7890</ssn><email>rama.pulavarthi@sun.com</email><password>cGFzc3dvcmQ=</password><memberSince>2000-08-24T11:05:35.000-07:00</memberSince><authenticated>true</authenticated></Person>";

    delayTest = "<delay xmlns=\"urn:test:types\"><interval>10000</interval></delay>";

    createDispatchJAXB() {
        service = Service.create(new QName("urn:test", "Hello"));
        context = createJAXBContext();
        portQName = new QName("urn:test", "HelloPort");
        service.addPort(portQName,
          "http://schemas.xmlsoap.org/wsdl/soap/http",
          helloPortAddress.toString());
        dispatch = service.createDispatch(portQName, context, Service.Mode.PAYLOAD);
        return dispatch;
    }
  ]]></pre-client>
  <client name="client.response-context3"><![CDATA[
    dispatch = createDispatchJAXB();
    try {
        req = new Hello_Type();
        req.setArgument("foo");
        req.setExtra("bar");

        dispatch.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, helloPortAddress.toString());
        dispatch.invoke(req);
    } catch (Exception e) {
        rc = dispatch.getResponseContext();
        assertEquals(200,rc.get(MessageContext.HTTP_RESPONSE_CODE));
    }
  ]]></client>
  <client name="client.response-context4"><![CDATA[
    dispatch = createDispatchJAXB();
    assertNull(dispatch.getResponseContext());
  ]]></client>
  <client name="client.response-context5"><![CDATA[
  ]]></client>
  <client name="client.response-context6"><![CDATA[
  ]]></client>
  <client name="client.response-context7"><![CDATA[
  ]]></client>
  <client name="client.response-context8"><![CDATA[
  ]]></client>
</descriptor>
